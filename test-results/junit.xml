<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="4" hostname="alex-ThinkPad-13" name="pytest" skipped="0" tests="55" time="287.165" timestamp="2020-07-24T13:25:56.719939"><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="16" name="test_alias_single_with_incorrect_column_format_in_metadata_raises_error" time="26.693"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="32" name="test_alias_single_with_undefined_column_metadata_raises_error" time="25.961"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="6" name="test_alias_single_correctly_generates_sql" time="26.590"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="24" name="test_alias_single_with_missing_column_metadata_raises_error" time="26.531"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="78" name="test_alias_all_correctly_generates_sql_for_partial_alias_list_without_prefix" time="10.282"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="65" name="test_alias_all_correctly_generates_sql_for_full_alias_list_without_prefix" time="9.633"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="40" name="test_alias_all_correctly_generates_sql_for_full_alias_list_with_prefix" time="9.885"></testcase><testcase classname="tests.unit.internal.test_alias.TestAliasMacro" file="tests/unit/internal/test_alias.py" line="53" name="test_alias_all_correctly_generates_sql_for_partial_alias_list_with_prefix" time="9.901"></testcase><testcase classname="tests.unit.internal.test_expand_column_list.TestExpandColumnListMacro" file="tests/unit/internal/test_expand_column_list.py" line="16" name="test_expand_column_list_correctly_generates_list_with_extra_nesting" time="9.469"></testcase><testcase classname="tests.unit.internal.test_expand_column_list.TestExpandColumnListMacro" file="tests/unit/internal/test_expand_column_list.py" line="26" name="test_expand_column_list_correctly_generates_list_with_no_nesting" time="9.555"></testcase><testcase classname="tests.unit.internal.test_as_constant.TestAsConstantMacro" file="tests/unit/internal/test_as_constant.py" line="6" name="test_as_constant_single_correctly_generates_string" time="10.620"></testcase><testcase classname="tests.unit.internal.test_expand_column_list.TestExpandColumnListMacro" file="tests/unit/internal/test_expand_column_list.py" line="6" name="test_expand_column_list_correctly_generates_list_with_nesting" time="9.450"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="17" name="test_hash_columns_correctly_generates_hashed_columns_for_composite_columns" time="9.443"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="55" name="test_hash_columns_correctly_generates_unsorted_hashed_columns_for_composite_columns_mapping" time="9.468"></testcase><testcase classname="tests.unit.internal.test_expand_column_list.TestExpandColumnListMacro" file="tests/unit/internal/test_expand_column_list.py" line="36" name="test_expand_column_list_raises_error_with_missing_columns" time="9.214"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="28" name="test_hash_columns_correctly_generates_sorted_hashed_columns_for_composite_columns" time="8.960"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="68" name="test_hash_columns_correctly_generates_sql_from_yaml" time="8.826"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="84" name="test_hash_columns_raises_warning_if_mapping_without_hashdiff" time="8.379"></testcase><testcase classname="tests.unit.staging.test_derive_columns.TestDeriveColumnsMacro" file="tests/unit/staging/test_derive_columns.py" line="6" name="test_derive_columns_correctly_generates_sql_with_source_columns" time="23.600"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="41" name="test_hash_columns_correctly_generates_sorted_hashed_columns_for_multiple_composite_columns" time="9.391"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="76" name="test_hash_columns_correctly_generates_sql_with_constants_from_yaml" time="9.281"></testcase><testcase classname="tests.unit.staging.test_derive_columns.TestDeriveColumnsMacro" file="tests/unit/staging/test_derive_columns.py" line="16" name="test_derive_columns_correctly_generates_sql_without_source_columns" time="8.858"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="6" name="test_stage_correctly_generates_sql_from_yaml" time="24.990"></testcase><testcase classname="tests.unit.staging.test_derive_columns.TestDeriveColumnsMacro" file="tests/unit/staging/test_derive_columns.py" line="26" name="test_derive_columns_correctly_generates_sql_with_only_source_columns" time="12.349"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="40" name="test_stage_correctly_generates_sql_for_only_hashing_from_yaml" time="30.201"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="24" name="test_stage_correctly_generates_sql_for_only_source_columns_from_yaml" time="31.730"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="14" name="test_stage_correctly_generates_sql_from_yaml_with_source_style" time="35.244"></testcase><testcase classname="tests.unit.staging.test_hash_columns.TestHashColumnsMacro" file="tests/unit/staging/test_hash_columns.py" line="6" name="test_hash_columns_correctly_generates_hashed_columns_for_single_columns" time="16.471"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="48" name="test_stage_correctly_generates_sql_for_only_derived_from_yaml" time="17.934"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="32" name="test_stage_correctly_generates_sql_for_only_source_columns_and_missing_flag_from_yaml" time="17.323"></testcase><testcase classname="tests.unit.supporting.test_hash.TestHashMacro" file="tests/unit/supporting/test_hash.py" line="6" name="test_hash_single_column_is_successful" time="14.852"></testcase><testcase classname="tests.unit.supporting.test_hash.TestHashMacro" file="tests/unit/supporting/test_hash.py" line="15" name="test_hash_single_item_list_column_for_pk_is_successful" time="15.247"></testcase><testcase classname="tests.unit.supporting.test_hash.TestHashMacro" file="tests/unit/supporting/test_hash.py" line="33" name="test_hash_multi_column_as_pk_is_successful" time="14.550"></testcase><testcase classname="tests.unit.supporting.test_hash.TestHashMacro" file="tests/unit/supporting/test_hash.py" line="24" name="test_hash_single_item_list_column_for_hashdiff_is_successful" time="14.935"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="56" name="test_stage_correctly_generates_sql_for_hashing_and_source_from_yaml" time="18.124"><failure message="assert left == right failed. 
  #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
  
  #x1B[0m  &quot;SELECT
  #x1B[0m  
  #x1B[0m  CAST((MD5_BINARY(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;))) AS BINARY(16)) AS CUSTOMER_PK,
  #x1B[0m  CAST(MD5_BINARY(CONCAT(
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_DOB AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_NAME AS VARCHAR))), &apos;&apos;), &apos;^^&apos;) ))
  #x1B[0m  AS BINARY(16)) AS CUST_CUSTOMER_HASHDIFF,
  #x1B[0m  CAST(MD5_BINARY(CONCAT(
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(NATIONALITY AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
  #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(PHONE AS VARCHAR))), &apos;&apos;), &apos;^^&apos;) ))
  #x1B[0m  AS BINARY(16)) AS CUSTOMER_HASHDIFF,
  #x1B[0m  
  #x1B[1m#x1B[32m L #x1B[0m
  #x1B[1m#x1B[31m R BOOKING_FK,#x1B[0m
  #x1B[1m#x1B[31m R ORDER_FK,#x1B[0m
  #x1B[1m#x1B[31m R CUSTOMER_PK,#x1B[0m
  #x1B[1m#x1B[31m R CUSTOMER_ID,#x1B[0m
  #x1B[1m#x1B[31m R LOADDATE,#x1B[0m
  #x1B[1m#x1B[31m R RECORD_SOURCE,#x1B[0m
  #x1B[1m#x1B[31m R CUSTOMER_DOB,#x1B[0m
  #x1B[1m#x1B[31m R CUSTOMER_NAME,#x1B[0m
  #x1B[1m#x1B[31m R NATIONALITY,#x1B[0m
  #x1B[1m#x1B[31m R PHONE,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_2,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_3,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_4,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_5,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_6,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_7,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_8,#x1B[0m
  #x1B[1m#x1B[31m R TEST_COLUMN_9#x1B[0m
  #x1B[0m  
  #x1B[0m  FROM DBT_VAULT.TEST.raw_source&quot;
  
  #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
  #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m735#x1B[0m, len(right) == #x1B[1m#x1B[31m975#x1B[0m#x1B[0m
  #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
  #x1B[1m#x1B[36m7 items in right, but not left:#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;G&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;2&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;3&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;4&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;7&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;8&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;9&quot;#x1B[0m">self = &lt;tests.unit.staging.test_stage.TestStageMacro object at 0x7f9033c4b430&gt;

    def test_stage_correctly_generates_sql_for_hashing_and_source_from_yaml(self):
        process_logs = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name)
        actual_sql = self.dbt_test_utils.retrieve_compiled_model(self.current_test_name)
        expected_sql = self.dbt_test_utils.retrieve_expected_sql(self.current_test_name)
    
        assert &apos;Done&apos; in process_logs
&gt;       assert actual_sql == expected_sql
E       assert left == right failed. 
E         #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
E         
E         #x1B[0m  &quot;SELECT
E         #x1B[0m  
E         #x1B[0m  CAST((MD5_BINARY(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;))) AS BINARY(16)) AS CUSTOMER_PK,
E         #x1B[0m  CAST(MD5_BINARY(CONCAT(
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_DOB AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_NAME AS VARCHAR))), &apos;&apos;), &apos;^^&apos;) ))
E         #x1B[0m  AS BINARY(16)) AS CUST_CUSTOMER_HASHDIFF,
E         #x1B[0m  CAST(MD5_BINARY(CONCAT(
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(CUSTOMER_ID AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(NATIONALITY AS VARCHAR))), &apos;&apos;), &apos;^^&apos;), &apos;||&apos;,
E         #x1B[0m      IFNULL(NULLIF(UPPER(TRIM(CAST(PHONE AS VARCHAR))), &apos;&apos;), &apos;^^&apos;) ))
E         #x1B[0m  AS BINARY(16)) AS CUSTOMER_HASHDIFF,
E         #x1B[0m  
E         #x1B[1m#x1B[32m L #x1B[0m
E         #x1B[1m#x1B[31m R BOOKING_FK,#x1B[0m
E         #x1B[1m#x1B[31m R ORDER_FK,#x1B[0m
E         #x1B[1m#x1B[31m R CUSTOMER_PK,#x1B[0m
E         #x1B[1m#x1B[31m R CUSTOMER_ID,#x1B[0m
E         #x1B[1m#x1B[31m R LOADDATE,#x1B[0m
E         #x1B[1m#x1B[31m R RECORD_SOURCE,#x1B[0m
E         #x1B[1m#x1B[31m R CUSTOMER_DOB,#x1B[0m
E         #x1B[1m#x1B[31m R CUSTOMER_NAME,#x1B[0m
E         #x1B[1m#x1B[31m R NATIONALITY,#x1B[0m
E         #x1B[1m#x1B[31m R PHONE,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_2,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_3,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_4,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_5,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_6,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_7,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_8,#x1B[0m
E         #x1B[1m#x1B[31m R TEST_COLUMN_9#x1B[0m
E         #x1B[0m  
E         #x1B[0m  FROM DBT_VAULT.TEST.raw_source&quot;
E         
E         #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
E         #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m735#x1B[0m, len(right) == #x1B[1m#x1B[31m975#x1B[0m#x1B[0m
E         #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
E         #x1B[1m#x1B[36m7 items in right, but not left:#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;G&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;2&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;3&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;4&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;7&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;8&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;9&quot;#x1B[0m

/home/alex/PycharmProjects/dbtvault-dev/tests/unit/staging/test_stage.py:63: AssertionError</failure></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="6" name="test_prefix_column_in_single_item_list_is_successful" time="14.352"></testcase><testcase classname="tests.unit.supporting.test_hash.TestHashMacro" file="tests/unit/supporting/test_hash.py" line="42" name="test_hash_multi_column_as_hashdiff_is_successful" time="14.952"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="15" name="test_prefix_multiple_columns_is_successful" time="13.673"></testcase><testcase classname="tests.unit.staging.test_stage.TestStageMacro" file="tests/unit/staging/test_stage.py" line="64" name="test_stage_raises_error_with_missing_source" time="16.542"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="24" name="test_prefix_aliased_column_is_successful" time="13.771"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="45" name="test_prefix_aliased_column_with_alias_target_as_target_is_successful" time="14.204"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="35" name="test_prefix_aliased_column_with_alias_target_as_source_is_successful" time="14.491"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="55" name="test_prefix_with_no_columns_raises_error" time="14.129"></testcase><testcase classname="tests.unit.supporting.test_prefix.TestPrefixMacro" file="tests/unit/supporting/test_prefix.py" line="63" name="test_prefix_with_empty_column_list_raises_error" time="12.904"></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="6" name="test_hub_macro_correctly_generates_sql_for_single_source" time="28.566"></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="14" name="test_hub_macro_correctly_generates_sql_for_single_source_multi_nk" time="28.631"></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="22" name="test_hub_macro_correctly_generates_sql_for_incremental_single_source" time="48.830"><failure message="assert left == right failed. 
  #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
  
  #x1B[0m  &quot;WITH STG AS (
  #x1B[0m      SELECT DISTINCT
  #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
  #x1B[0m      FROM (
  #x1B[0m          SELECT b.*,
  #x1B[0m          ROW_NUMBER() OVER(
  #x1B[0m              PARTITION BY b.CUSTOMER_PK
  #x1B[0m              ORDER BY b.LOADDATE, b.RECORD_SOURCE ASC
  #x1B[0m          ) AS RN
  #x1B[0m          FROM DBT_VAULT.TEST.raw_source AS b
  #x1B[0m          WHERE b.CUSTOMER_PK IS NOT NULL
  #x1B[0m      ) AS a
  #x1B[0m      WHERE RN = 1
  #x1B[0m  )
  #x1B[0m  
  #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
  #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
  #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_single_source AS d #x1B[0m
  #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
  #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
  
  #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
  #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m401#x1B[0m, len(right) == #x1B[1m#x1B[31m562#x1B[0m#x1B[0m
  #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
  #x1B[1m#x1B[36m27 items in right, but not left:#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m">self = &lt;test_hub.TestHubMacro object at 0x7f9033c44730&gt;

    def test_hub_macro_correctly_generates_sql_for_incremental_single_source(self):
        process_logs_first_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name,
                                                                   full_refresh=True)
        process_logs_inc_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name)
        actual_sql = self.dbt_test_utils.retrieve_compiled_model(self.current_test_name)
        expected_sql = self.dbt_test_utils.retrieve_expected_sql(self.current_test_name)
    
        assert &apos;Done&apos; in process_logs_first_run
        assert &apos;Done&apos; in process_logs_inc_run
&gt;       assert actual_sql == expected_sql
E       assert left == right failed. 
E         #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
E         
E         #x1B[0m  &quot;WITH STG AS (
E         #x1B[0m      SELECT DISTINCT
E         #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
E         #x1B[0m      FROM (
E         #x1B[0m          SELECT b.*,
E         #x1B[0m          ROW_NUMBER() OVER(
E         #x1B[0m              PARTITION BY b.CUSTOMER_PK
E         #x1B[0m              ORDER BY b.LOADDATE, b.RECORD_SOURCE ASC
E         #x1B[0m          ) AS RN
E         #x1B[0m          FROM DBT_VAULT.TEST.raw_source AS b
E         #x1B[0m          WHERE b.CUSTOMER_PK IS NOT NULL
E         #x1B[0m      ) AS a
E         #x1B[0m      WHERE RN = 1
E         #x1B[0m  )
E         #x1B[0m  
E         #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
E         #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
E         #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_single_source AS d #x1B[0m
E         #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
E         #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
E         
E         #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
E         #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m401#x1B[0m, len(right) == #x1B[1m#x1B[31m562#x1B[0m#x1B[0m
E         #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
E         #x1B[1m#x1B[36m27 items in right, but not left:#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m

/home/alex/PycharmProjects/dbtvault-dev/tests/unit/tables/test_hub.py:32: AssertionError</failure></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="33" name="test_hub_macro_correctly_generates_sql_for_incremental_single_source_multi_nk" time="50.904"><failure message="assert left == right failed. 
  #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
  
  #x1B[0m  &quot;WITH STG AS (
  #x1B[0m      SELECT DISTINCT
  #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.CUSTOMER_NAME, a.LOADDATE, a.RECORD_SOURCE
  #x1B[0m      FROM (
  #x1B[0m          SELECT b.*,
  #x1B[0m          ROW_NUMBER() OVER(
  #x1B[0m              PARTITION BY b.CUSTOMER_PK
  #x1B[0m              ORDER BY b.LOADDATE, b.RECORD_SOURCE ASC
  #x1B[0m          ) AS RN
  #x1B[0m          FROM DBT_VAULT.TEST.raw_source AS b
  #x1B[0m          WHERE b.CUSTOMER_PK IS NOT NULL
  #x1B[0m      ) AS a
  #x1B[0m      WHERE RN = 1
  #x1B[0m  )
  #x1B[0m  
  #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
  #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
  #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_single_source_multi_nk AS d #x1B[0m
  #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
  #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
  
  #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
  #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m418#x1B[0m, len(right) == #x1B[1m#x1B[31m588#x1B[0m#x1B[0m
  #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
  #x1B[1m#x1B[36m33 items in right, but not left:#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;k&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m">self = &lt;test_hub.TestHubMacro object at 0x7f3ab3c442e0&gt;

    def test_hub_macro_correctly_generates_sql_for_incremental_single_source_multi_nk(self):
        process_logs_first_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name,
                                                                   full_refresh=True)
        process_logs_inc_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name)
        actual_sql = self.dbt_test_utils.retrieve_compiled_model(self.current_test_name)
        expected_sql = self.dbt_test_utils.retrieve_expected_sql(self.current_test_name)
    
        assert &apos;Done&apos; in process_logs_first_run
        assert &apos;Done&apos; in process_logs_inc_run
&gt;       assert actual_sql == expected_sql
E       assert left == right failed. 
E         #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
E         
E         #x1B[0m  &quot;WITH STG AS (
E         #x1B[0m      SELECT DISTINCT
E         #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.CUSTOMER_NAME, a.LOADDATE, a.RECORD_SOURCE
E         #x1B[0m      FROM (
E         #x1B[0m          SELECT b.*,
E         #x1B[0m          ROW_NUMBER() OVER(
E         #x1B[0m              PARTITION BY b.CUSTOMER_PK
E         #x1B[0m              ORDER BY b.LOADDATE, b.RECORD_SOURCE ASC
E         #x1B[0m          ) AS RN
E         #x1B[0m          FROM DBT_VAULT.TEST.raw_source AS b
E         #x1B[0m          WHERE b.CUSTOMER_PK IS NOT NULL
E         #x1B[0m      ) AS a
E         #x1B[0m      WHERE RN = 1
E         #x1B[0m  )
E         #x1B[0m  
E         #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
E         #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
E         #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_single_source_multi_nk AS d #x1B[0m
E         #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
E         #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
E         
E         #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
E         #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m418#x1B[0m, len(right) == #x1B[1m#x1B[31m588#x1B[0m#x1B[0m
E         #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
E         #x1B[1m#x1B[36m33 items in right, but not left:#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;k&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m

/home/alex/PycharmProjects/dbtvault-dev/tests/unit/tables/test_hub.py:43: AssertionError</failure></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="44" name="test_hub_macro_correctly_generates_sql_for_multi_source" time="14.589"></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="52" name="test_hub_macro_correctly_generates_sql_for_incremental_multi_source" time="34.436"><failure message="assert left == right failed. 
  #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
  
  #x1B[0m  &quot;WITH STG_1 AS (
  #x1B[0m      SELECT DISTINCT
  #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
  #x1B[0m      FROM (
  #x1B[0m          SELECT CUSTOMER_PK, CUSTOMER_ID, LOADDATE, RECORD_SOURCE,
  #x1B[0m          ROW_NUMBER() OVER(
  #x1B[0m              PARTITION BY CUSTOMER_PK
  #x1B[0m              ORDER BY LOADDATE ASC
  #x1B[0m          ) AS RN
  #x1B[0m          FROM DBT_VAULT.TEST.raw_source
  #x1B[0m      ) AS a
  #x1B[0m      WHERE RN = 1
  #x1B[0m  ),
  #x1B[0m  STG_2 AS (
  #x1B[0m      SELECT DISTINCT
  #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
  #x1B[0m      FROM (
  #x1B[0m          SELECT CUSTOMER_PK, CUSTOMER_ID, LOADDATE, RECORD_SOURCE,
  #x1B[0m          ROW_NUMBER() OVER(
  #x1B[0m              PARTITION BY CUSTOMER_PK
  #x1B[0m              ORDER BY LOADDATE ASC
  #x1B[0m          ) AS RN
  #x1B[0m          FROM DBT_VAULT.TEST.raw_source_2
  #x1B[0m      ) AS a
  #x1B[0m      WHERE RN = 1
  #x1B[0m  ),
  #x1B[0m  STG AS (
  #x1B[0m      SELECT DISTINCT
  #x1B[0m      b.CUSTOMER_PK, b.CUSTOMER_ID, b.LOADDATE, b.RECORD_SOURCE
  #x1B[0m      FROM (
  #x1B[0m              SELECT *,
  #x1B[0m              ROW_NUMBER() OVER(
  #x1B[0m                  PARTITION BY CUSTOMER_PK
  #x1B[0m                  ORDER BY LOADDATE, RECORD_SOURCE ASC
  #x1B[0m              ) AS RN
  #x1B[0m              FROM (
  #x1B[0m                  SELECT * FROM STG_1
  #x1B[0m                  UNION ALL
  #x1B[0m                  SELECT * FROM STG_2
  #x1B[0m              )
  #x1B[0m          WHERE CUSTOMER_PK IS NOT NULL
  #x1B[0m      ) AS b
  #x1B[0m      WHERE RN = 1
  #x1B[0m  )
  #x1B[0m  
  #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
  #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
  #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_multi_source AS d #x1B[0m
  #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
  #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
  
  #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
  #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m1208#x1B[0m, len(right) == #x1B[1m#x1B[31m1368#x1B[0m#x1B[0m
  #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
  #x1B[1m#x1B[36m27 items in right, but not left:#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
  #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m">self = &lt;test_hub.TestHubMacro object at 0x7f04c0f8c8b0&gt;

    def test_hub_macro_correctly_generates_sql_for_incremental_multi_source(self):
        process_logs_first_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name,
                                                                   full_refresh=True)
        process_logs_inc_run = self.dbt_test_utils.run_dbt_model(mode=&apos;run&apos;, model_name=self.current_test_name)
        actual_sql = self.dbt_test_utils.retrieve_compiled_model(self.current_test_name)
        expected_sql = self.dbt_test_utils.retrieve_expected_sql(self.current_test_name)
    
        assert &apos;Done&apos; in process_logs_first_run
        assert &apos;Done&apos; in process_logs_inc_run
&gt;       assert actual_sql == expected_sql
E       assert left == right failed. 
E         #x1B[0mShowing unified diff (#x1B[1m#x1B[32mL=left#x1B[0m, #x1B[1m#x1B[31mR=right#x1B[0m):
E         
E         #x1B[0m  &quot;WITH STG_1 AS (
E         #x1B[0m      SELECT DISTINCT
E         #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
E         #x1B[0m      FROM (
E         #x1B[0m          SELECT CUSTOMER_PK, CUSTOMER_ID, LOADDATE, RECORD_SOURCE,
E         #x1B[0m          ROW_NUMBER() OVER(
E         #x1B[0m              PARTITION BY CUSTOMER_PK
E         #x1B[0m              ORDER BY LOADDATE ASC
E         #x1B[0m          ) AS RN
E         #x1B[0m          FROM DBT_VAULT.TEST.raw_source
E         #x1B[0m      ) AS a
E         #x1B[0m      WHERE RN = 1
E         #x1B[0m  ),
E         #x1B[0m  STG_2 AS (
E         #x1B[0m      SELECT DISTINCT
E         #x1B[0m      a.CUSTOMER_PK, a.CUSTOMER_ID, a.LOADDATE, a.RECORD_SOURCE
E         #x1B[0m      FROM (
E         #x1B[0m          SELECT CUSTOMER_PK, CUSTOMER_ID, LOADDATE, RECORD_SOURCE,
E         #x1B[0m          ROW_NUMBER() OVER(
E         #x1B[0m              PARTITION BY CUSTOMER_PK
E         #x1B[0m              ORDER BY LOADDATE ASC
E         #x1B[0m          ) AS RN
E         #x1B[0m          FROM DBT_VAULT.TEST.raw_source_2
E         #x1B[0m      ) AS a
E         #x1B[0m      WHERE RN = 1
E         #x1B[0m  ),
E         #x1B[0m  STG AS (
E         #x1B[0m      SELECT DISTINCT
E         #x1B[0m      b.CUSTOMER_PK, b.CUSTOMER_ID, b.LOADDATE, b.RECORD_SOURCE
E         #x1B[0m      FROM (
E         #x1B[0m              SELECT *,
E         #x1B[0m              ROW_NUMBER() OVER(
E         #x1B[0m                  PARTITION BY CUSTOMER_PK
E         #x1B[0m                  ORDER BY LOADDATE, RECORD_SOURCE ASC
E         #x1B[0m              ) AS RN
E         #x1B[0m              FROM (
E         #x1B[0m                  SELECT * FROM STG_1
E         #x1B[0m                  UNION ALL
E         #x1B[0m                  SELECT * FROM STG_2
E         #x1B[0m              )
E         #x1B[0m          WHERE CUSTOMER_PK IS NOT NULL
E         #x1B[0m      ) AS b
E         #x1B[0m      WHERE RN = 1
E         #x1B[0m  )
E         #x1B[0m  
E         #x1B[1m#x1B[32m L SELECT c.* FROM STG AS c&quot;#x1B[0m
E         #x1B[1m#x1B[31m R SELECT c.* FROM STG AS c#x1B[0m
E         #x1B[1m#x1B[31m R LEFT JOIN DBT_VAULT.TEST.test_hub_macro_correctly_generates_sql_for_incremental_multi_source AS d #x1B[0m
E         #x1B[1m#x1B[31m R ON c.CUSTOMER_PK = d.CUSTOMER_PK#x1B[0m
E         #x1B[1m#x1B[31m R WHERE d.CUSTOMER_PK IS NULL&quot;#x1B[0m
E         
E         #x1B[1m#x1B[36mleft and right have different lengths:#x1B[0m
E         #x1B[1m#x1B[31m#x1B[0m  len(left) == #x1B[1m#x1B[32m1208#x1B[0m, len(right) == #x1B[1m#x1B[31m1368#x1B[0m#x1B[0m
E         #x1B[1m#x1B[36m0 items in left, but not right:#x1B[0m
E         #x1B[1m#x1B[36m27 items in right, but not left:#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;J&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;h&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;y&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;g&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;q&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;f&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;n&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;m&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;l&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;t&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;i&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m
E         #x1B[1m#x1B[31m-#x1B[0m #x1B[1m#x1B[31m&quot;d&quot;#x1B[0m

/home/alex/PycharmProjects/dbtvault-dev/tests/unit/tables/test_hub.py:62: AssertionError</failure></testcase><testcase classname="tests.unit.tables.test_hub.TestHubMacro" file="tests/unit/tables/test_hub.py" line="63" name="test_hub_macro_correctly_generates_sql_for_incremental_multi_source_multi_nk" time="34.609"></testcase><testcase classname="tests.unit.tables.test_link.TestLinkMacro" file="tests/unit/tables/test_link.py" line="14" name="test_link_macro_correctly_generates_sql_for_incremental_single_source" time="50.037"></testcase><testcase classname="tests.unit.tables.test_link.TestLinkMacro" file="tests/unit/tables/test_link.py" line="6" name="test_link_macro_correctly_generates_sql_for_single_source" time="30.547"></testcase><testcase classname="tests.unit.tables.test_link.TestLinkMacro" file="tests/unit/tables/test_link.py" line="25" name="test_link_macro_correctly_generates_sql_for_multi_source" time="29.750"></testcase><testcase classname="tests.unit.tables.test_link.TestLinkMacro" file="tests/unit/tables/test_link.py" line="33" name="test_link_macro_correctly_generates_sql_for_incremental_multi_source" time="25.053"></testcase></testsuite></testsuites>