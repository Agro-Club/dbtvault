{#- Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-#}

{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_ldts, src_eff_from, src_source, link, source_model)-%}

{%- set source_cols = dbtvault.expand_column_list([src_pk, src_ldts, src_eff_from, src_source])-%}
{%- set max_date = "'" ~ '9999-12-31' ~ "'" -%}
-- Generated by dbtvault.
{% if is_incremental() %}
WITH
{#- Reduce data set to size of stage table. #}
c AS (SELECT DISTINCT
            {{ dbtvault.prefix(source_cols, 'a') }},
            a.START_DATETIME, a.END_DATETIME
            FROM {{ this }} AS a
            INNER JOIN {{ ref(source_model) }} AS b ON {{ dbtvault.prefix([src_pk], 'a') }} = {{ dbtvault.prefix([src_pk], 'b') }}
            )
{# Find latest satellite for each pk in set c. -#}
, d as (SELECT
          {{ dbtvault.prefix(source_cols, 'c') }},
          c.START_DATETIME, c.END_DATETIME,
          CASE WHEN RANK()
          OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'c') }}
          ORDER BY {{ dbtvault.prefix(['END_DATETIME'], 'c') }} ASC) = 1
          THEN 'Y' ELSE 'N' END AS CURR_FLG
        FROM c)
, p AS (
    SELECT q.* FROM {{ ref(link) }} AS q
    INNER JOIN {{ ref(source_model) }} AS r ON
    {{ dbtvault.multikey(src_dfk, ['q', 'r'], 'join') }}
)
, x AS (
    SELECT p.*
    {% for dfk in src_dfk if not src_dfk is string %}
    , {{ dbtvault.prefix([dfk], 's') }} AS DFK_{{ loop.index }}
    {% else %}
    , {{ dbtvault.prefix([src_dfk], 's') }} AS DFK_1
    {% endfor %}
    FROM p
    LEFT JOIN {{ ref(source_model) }} AS s ON
    {{ dbtvault.multikey(src_dfk, ['p', 's'], 'join') }}
    AND
    {{ dbtvault.multikey(src_sfk, ['p', 's'], 'join') }}
    WHERE (
    {{ dbtvault.multikey(src_dfk, ['s'], 'where null') }}
    AND
    {{ dbtvault.multikey(src_sfk, ['s'], 'where null') }}
    )
)
, y AS (
  SELECT
    {{ dbtvault.prefix([src_pk, src_ldts, src_source, src_eff_from], 't') }},
    t.START_DATETIME, t.END_DATETIME
    {% for dfk in src_dfk if not src_dfk is string %}
    , {{ dbtvault.prefix(['DFK_'~loop.index ], 'x') }}
    {% else %}
    , {{ dbtvault.prefix(['DFK_1'], 'x') }}
    {% endfor %}
    , {{ dbtvault.prefix([src_dfk], 'x')}},
    CASE WHEN RANK()
    OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 't') }}
    ORDER BY {{ dbtvault.prefix(['END_DATETIME'], 't') }} ASC) = 1
    THEN 'Y' ELSE 'N' END AS CURR_FLG
  FROM x
  INNER JOIN {{ this }} AS t ON {{ dbtvault.prefix([src_pk], 'x') }}={{ dbtvault.prefix([src_pk], 't') }}
  )
{% endif %}
SELECT DISTINCT
  {{ dbtvault.prefix([src_pk, src_ldts, src_source, src_eff_from], 'e') }},
  {{ dbtvault.prefix([src_eff_from], 'e') }} AS START_DATETIME,
  TO_DATE({{ max_date }}) AS END_DATETIME
FROM {{ ref(source_model) }} AS e
{% if is_incremental() -%}
LEFT JOIN (
    SELECT {{ dbtvault.prefix(source_cols, 'd')}}, d.START_DATETIME, d.END_DATETIME
    FROM d
    WHERE d.CURR_FLG = 'Y' AND {{ dbtvault.prefix(['END_DATETIME'], 'd') }}=TO_DATE({{ max_date }})
    ) AS eff
ON {{ dbtvault.prefix([src_pk], 'eff') }}={{ dbtvault.prefix([src_pk], 'e') }}
WHERE ({{ dbtvault.prefix([src_pk], 'eff') }} IS NULL
AND
{{ dbtvault.multikey(src_sfk, ['e'], 'where not null') }}
AND
{{ dbtvault.multikey(src_dfk, ['e'], 'where not null') }}
)
UNION
SELECT
  {{ dbtvault.prefix([src_pk], 'y') }},
  {{ dbtvault.prefix([src_ldts], 'z') }},
  {{ dbtvault.prefix([src_source, src_eff_from], 'y') }},
  y.START_DATETIME,
  CASE WHEN
  {% for dfk in src_dfk if not src_dfk is string %}
  {% if loop.index == src_dfk|length %}
  y.DFK_{{loop.index|string}} IS NULL
  {% else %}
  y.DFK_{{loop.index|string}} IS NULL AND
  {% endif %}
  {% else %}
  y.DFK_1 IS NULL
  {% endfor %}
  THEN {{ dbtvault.prefix([src_eff_from], 'z') }} ELSE TO_DATE({{ max_date }}) END AS END_DATETIME
FROM y
LEFT JOIN {{ ref(source_model) }} AS z ON
{{ dbtvault.multikey(src_dfk, ['y', 'z'], 'join') }}
WHERE (y.CURR_FLG='Y' AND {{ dbtvault.prefix(['END_DATETIME'], 'y') }}={{ max_date }})
{%- endif -%}
{% endmacro %}