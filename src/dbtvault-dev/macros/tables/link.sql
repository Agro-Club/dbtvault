{#- Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-#}

{%- macro link(src_pk, src_fk, src_ldts, src_source, source_model) -%}

{#{%- set source_data = dbtvault.is_multi_source(source, src_pk, src_fk, src_ldts, src_source) -%}#}
{#{%- set source_col = source_data[0] -%}#}
{#{%- set is_union = source_data[1] -%}#}

{%- set source_cols = dbtvault.get_src_col_list([src_pk, src_fk, src_ldts, src_source]) -%}
{%- set fk_cols = source_cols[1:-2] -%}

-- Generated by dbtvault.
WITH

{%- if source_model is iterable and source_model is not string %}

{% for src in source_model %}

STG_{{ loop.index|string }} AS (
    SELECT DISTINCT
      {{ dbtvault.prefix(source_cols, 'a') }}
    FROM (
    SELECT
    {{ src_pk }}
    {%- for fk in fk_cols %}
    , {{ fk }}
    {%- endfor %}
    , {{ src_ldts }}, {{ src_source }},
    ROW_NUMBER() OVER(PARTITION BY {{ src_pk }} ORDER BY {{ src_ldts }} ASC) AS RN
    FROM {{ ref(src) }}
    ) AS a
    WHERE RN = 1),
{% endfor %}

STG AS (
    SELECT DISTINCT
      {{ dbtvault.prefix(source_cols, 'b') }}
    FROM (
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY {{ src_pk }} ORDER BY {{ src_ldts }}, {{ src_source }} ASC) AS RN
    FROM (
    {%- for src in source_model %}
    SELECT * FROM
    {%- if loop.index == source_model|length %}
    STG_{{ loop.index|string }}
    {%- else %}
    STG_{{ loop.index|string }}
    UNION
    {%- endif %}
    {%- endfor %}
    )
    WHERE
    {%- for fk in fk_cols %}
    {%- if loop.index == fk_cols|length %}
    {{ fk }} <> {{ dbtvault.hash_check("^^") }} AND
    {{ fk }} <> {{ dbtvault.hash_check("") }}
    {%- else %}
    {{ fk }} <> {{ dbtvault.hash_check("^^") }} AND
    {{ fk }} <> {{ dbtvault.hash_check("") }} AND
    {%- endif -%}
    {%- endfor -%}
    ) AS b
    WHERE RN = 1)

{% else %}

STG AS (
    SELECT DISTINCT
      {{ dbtvault.prefix(source_cols, 'a') }}
    FROM (
    SELECT b.*,
    ROW_NUMBER() OVER(PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}
    ORDER BY {{ dbtvault.prefix([src_ldts], 'b') }}, {{ dbtvault.prefix([src_source], 'b') }} ASC) AS RN
    FROM {{ ref(source_model) }} AS b
    WHERE
    {%- for fk in fk_cols %}
    {%- if loop.index == fk_cols|length %}
    {{ dbtvault.prefix([fk], 'b') }}<>{{ dbtvault.hash_check("^^") }} AND
    {{ dbtvault.prefix([fk], 'b') }}<>{{ dbtvault.hash_check("") }}
    {%- else %}
    {{ dbtvault.prefix([fk], 'b') }}<>{{ dbtvault.hash_check("^^") }} AND
    {{ dbtvault.prefix([fk], 'b') }}<>{{ dbtvault.hash_check("") }} AND
    {%- endif -%}
    {%- endfor -%}) AS a
    WHERE RN = 1)

{% endif %}

SELECT c.* FROM STG AS c
{%- if is_incremental() %}
LEFT JOIN {{ this }} AS d ON {{ dbtvault.prefix([src_pk], 'c') }}={{ dbtvault.prefix([src_pk], 'd') }}
WHERE {{ dbtvault.prefix([src_pk], 'd') }} IS NULL
{%- endif -%}

{%- endmacro -%}

{#SELECT DISTINCT {{ dbtvault.prefix([src_pk, src_fk, src_ldts, src_source], 'stg') }}#}
{#FROM (#}
{#    {{ source_col }}#}
{#) AS stg#}
{# If incremental union or single #}
{#{%- if is_incremental() -%}#}
{#LEFT JOIN {{ this }} AS tgt#}
{#ON {{ dbtvault.prefix([src_pk], 'stg') }} = {{ dbtvault.prefix([src_pk], 'tgt') }}#}
{#WHERE {{ dbtvault.prefix([src_pk], 'tgt') }} IS NULL#}
{#{% if is_union -%}#}
{#AND stg.FIRST_SOURCE IS NULL#}
{#{%- endif -%}#}
{#{%- for fk in src_fk %}#}
{#AND {{ dbtvault.prefix([fk], 'stg') }}<>{{ dbtvault.hash_check("'^^'") }}#}
{#{% endfor %}#}
{#{%- elif not is_incremental() -%}#}
{#{% if is_union %}#}
{#WHERE stg.FIRST_SOURCE IS NULL#}
{#{%- for fk in src_fk %}#}
{#AND {{ dbtvault.prefix([fk], 'stg') }}<>{{ dbtvault.hash_check("'^^'") }}#}
{#{% endfor %}#}
{#{% else %}#}
{#WHERE#}
{#{%- for fk in src_fk %}#}
{#{% if loop.index == src_fk|length %}#}
{#{{ dbtvault.prefix([fk], 'stg') }}<>{{ dbtvault.hash_check("'^^'") }}#}
{#{% else %}#}
{#{{ dbtvault.prefix([fk], 'stg') }}<>{{ dbtvault.hash_check("'^^'") }} AND#}
{#{% endif %}#}
{#{% endfor %}#}
{#{% endif %}#}
{#{%- endif -%}#}
{#{%- endmacro -%}#}