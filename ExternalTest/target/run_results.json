{"results": [{"node": {"name": "stg_orders_hashed", "root_path": "/home/alex/PycharmProjects/dbtTest", "resource_type": "model", "path": "hashing/stg_orders_hashed.sql", "original_file_path": "models/hashing/stg_orders_hashed.sql", "package_name": "dbtTest", "raw_sql": "{{ config(materialized='table', schema='STG', tags=['static', 'incremental'], enabled=true) }}\n\nselect\n{{ snow_vault.md5_binary('ORDERKEY', 'ORDER_PK') }},\n{{ snow_vault.md5_binary('PARTKEY', 'PART_PK') }},\n{{ snow_vault.md5_binary('SUPPLIERKEY', 'SUPPLIER_PK') }},\n{{ snow_vault.md5_binary('LINENUMBER', 'LINEITEM_PK') }},\n{{ snow_vault.md5_binary(['PARTKEY', 'SUPPLIERKEY'], 'INVENTORY_PK') }},\n{{ snow_vault.md5_binary(['LINENUMBER', 'PARTKEY', 'SUPPLIERKEY'], 'INVENTORY_ALLOCATION_PK') }},\n{{ snow_vault.md5_binary(['COMMITDATE', 'DISCOUNT', 'EXTENDEDPRICE', 'LINESTATUS', 'LINE_COMMENT', 'QUANTITY', 'RECEIPTDATE', 'RETURNFLAG', 'SHIPDATE', 'SHIPINSTRUCT', 'SHIPMODE', 'TAX'], 'LINEITEM_HASHDIFF') }},\n{{ snow_vault.md5_binary(['LINENUMBER', 'ORDERKEY'], 'LINEITEM_ORDER_PK') }},\n{{ snow_vault.md5_binary(['CLERK', 'ORDERDATE', 'ORDERPRIORITY', 'ORDERSTATUS', 'ORDER_COMMENT', 'SHIPPRIORITY', 'TOTALPRICE'], 'ORDER_HASHDIFF') }},\n{{ snow_vault.md5_binary(['CUSTOMERKEY', 'ORDERKEY'], 'ORDER_CUSTOMER_PK') }},\n{{ snow_vault.md5_binary('CUSTOMERKEY', 'CUSTOMER_PK') }},\n{{ snow_vault.md5_binary(['CUSTOMERKEY', 'CUSTOMER_NATIONKEY'], 'LINK_CUSTOMER_NATION_PK') }},\n{{ snow_vault.md5_binary(['CUSTOMER_ACCBAL', 'CUSTOMER_ADDRESS', 'CUSTOMER_COMMENT', 'CUSTOMER_MKTSEGMENT', 'CUSTOMER_NAME', 'CUSTOMER_PHONE'], 'CUSTOMER_HASHDIFF') }},\n{{ snow_vault.md5_binary('CUSTOMER_NATIONKEY', 'CUSTOMER_NATION_PK') }},\n{{ snow_vault.md5_binary(['CUSTOMER_NATION_COMMENT', 'CUSTOMER_NATION_NAME'], 'CUSTOMER_NATION_HASHDIFF') }},\n{{ snow_vault.md5_binary('CUSTOMER_REGIONKEY', 'CUSTOMER_REGION_PK') }},\n{{ snow_vault.md5_binary(['CUSTOMER_NATIONKEY', 'CUSTOMER_REGIONKEY'], 'CUSTOMER_NATION_REGION_PK') }},\n{{ snow_vault.md5_binary(['CUSTOMER_REGION_COMMENT', 'CUSTOMER_REGION_NAME'], 'CUSTOMER_REGION_HASHDIFF') }},\n *, {{var('date')}} AS LOADDATE, {{var('date')}} AS EFFECTIVE_FROM, 'TPCH' AS SOURCE FROM DV_PROTOTYPE_DB.SRC_STG.V_SRC_STG_ORDERS", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.dbtTest.stg_orders_hashed", "empty": false, "fqn": ["dbtTest", "hashing", "stg_orders_hashed"], "tags": ["static", "incremental"], "config": {"enabled": true, "materialized": "table", "post-hook": [], "tags": ["static", "incremental"], "pre-hook": [], "column_types": {}, "vars": {"date": "TO_DATE('1992-01-08')", "history_date": "TO_DATE('1992-01-08')"}, "quoting": {}, "persist_docs": {}, "schema": "STG"}, "schema": "SRC_STG", "database": "DV_PROTOTYPE_DB", "alias": "stg_orders_hashed", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nselect\nCAST(MD5_BINARY(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR)))) AS BINARY(16)) AS ORDER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(PARTKEY AS VARCHAR)))) AS BINARY(16)) AS PART_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR)))) AS BINARY(16)) AS SUPPLIER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR)))) AS BINARY(16)) AS LINEITEM_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(PARTKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS INVENTORY_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(PARTKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS INVENTORY_ALLOCATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(COMMITDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(DISCOUNT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(EXTENDEDPRICE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(LINESTATUS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(LINE_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(QUANTITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(RECEIPTDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(RETURNFLAG AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPINSTRUCT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPMODE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(TAX AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINEITEM_HASHDIFF,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINEITEM_ORDER_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CLERK AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERPRIORITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERSTATUS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDER_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPPRIORITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(TOTALPRICE AS VARCHAR))), '^^') )) AS BINARY(16)) AS ORDER_HASHDIFF,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS ORDER_CUSTOMER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINK_CUSTOMER_NATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_ACCBAL AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_ADDRESS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_MKTSEGMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NAME AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_PHONE AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_HASHDIFF,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_NATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATION_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATION_NAME AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_NATION_HASHDIFF,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMER_REGIONKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_REGION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGIONKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_NATION_REGION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGION_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGION_NAME AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_REGION_HASHDIFF,\n *, TO_DATE('1992-01-08') AS LOADDATE, TO_DATE('1992-01-08') AS EFFECTIVE_FROM, 'TPCH' AS SOURCE FROM DV_PROTOTYPE_DB.SRC_STG.V_SRC_STG_ORDERS", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\nCAST(MD5_BINARY(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR)))) AS BINARY(16)) AS ORDER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(PARTKEY AS VARCHAR)))) AS BINARY(16)) AS PART_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR)))) AS BINARY(16)) AS SUPPLIER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR)))) AS BINARY(16)) AS LINEITEM_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(PARTKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS INVENTORY_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(PARTKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SUPPLIERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS INVENTORY_ALLOCATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(COMMITDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(DISCOUNT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(EXTENDEDPRICE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(LINESTATUS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(LINE_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(QUANTITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(RECEIPTDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(RETURNFLAG AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPINSTRUCT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPMODE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(TAX AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINEITEM_HASHDIFF,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(LINENUMBER AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINEITEM_ORDER_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CLERK AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERDATE AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERPRIORITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERSTATUS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDER_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(SHIPPRIORITY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(TOTALPRICE AS VARCHAR))), '^^') )) AS BINARY(16)) AS ORDER_HASHDIFF,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(ORDERKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS ORDER_CUSTOMER_PK,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMERKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS LINK_CUSTOMER_NATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_ACCBAL AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_ADDRESS AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_MKTSEGMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NAME AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_PHONE AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_HASHDIFF,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_NATION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATION_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATION_NAME AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_NATION_HASHDIFF,\nCAST(MD5_BINARY(UPPER(TRIM(CAST(CUSTOMER_REGIONKEY AS VARCHAR)))) AS BINARY(16)) AS CUSTOMER_REGION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_NATIONKEY AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGIONKEY AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_NATION_REGION_PK,\nCAST(MD5_BINARY(CONCAT(IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGION_COMMENT AS VARCHAR))), '^^'), '||',IFNULL(UPPER(TRIM(CAST(CUSTOMER_REGION_NAME AS VARCHAR))), '^^') )) AS BINARY(16)) AS CUSTOMER_REGION_HASHDIFF,\n *, TO_DATE('1992-01-08') AS LOADDATE, TO_DATE('1992-01-08') AS EFFECTIVE_FROM, 'TPCH' AS SOURCE FROM DV_PROTOTYPE_DB.SRC_STG.V_SRC_STG_ORDERS", "wrapped_sql": "None", "build_path": "target/compiled/dbtTest/hashing/stg_orders_hashed.sql"}, "error": null, "skip": false, "status": "SUCCESS 1", "fail": null, "execution_time": 3.4969370365142822, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-09-05T06:49:35.476956Z", "completed_at": "2019-09-05T06:49:35.486843Z"}, {"name": "execute", "started_at": "2019-09-05T06:49:35.486921Z", "completed_at": "2019-09-05T06:49:38.123693Z"}]}, {"node": {"name": "test_hub_customer", "root_path": "/home/alex/PycharmProjects/dbtTest/dbt_modules/snow_vault", "resource_type": "model", "path": "feature_sql_files/test_hub_customer.sql", "original_file_path": "models/feature_sql_files/test_hub_customer.sql", "package_name": "snow_vault", "raw_sql": "{{config(materialized='incremental', schema='test_vlt', enabled=true, tags='feature')}}\n\nSELECT\n                CAST(CUSTOMER_PK AS BINARY(16)) AS CUSTOMER_PK,\n                CAST(CUSTOMERKEY AS NUMBER(38,0)) AS CUSTOMERKEY,\n                CAST(SOURCE AS VARCHAR(4)) AS SOURCE,\n                CAST(LOADDATE AS DATE) AS LOADDATE\n\n FROM (\n  SELECT DISTINCT CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE, FIRST_SOURCE\n  FROM\n    (SELECT DISTINCT a.CUSTOMER_PK, a.CUSTOMERKEY, a.SOURCE, a.LOADDATE,\n                     lag(a.SOURCE, 1) over(partition by a.CUSTOMER_PK order by a.CUSTOMER_PK) as FIRST_SOURCE\n    FROM DV_PROTOTYPE_DB.SRC_TEST_STG.STG_CUSTOMER AS a\n    LEFT JOIN {{ this }} AS c\n    ON a.CUSTOMER_PK = c.CUSTOMER_PK\n    AND c.CUSTOMER_PK IS NULL) AS b)\nAS stg\nWHERE stg.CUSTOMER_PK NOT IN (SELECT CUSTOMER_PK FROM {{ this }})\nAND FIRST_SOURCE IS NULL", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.snow_vault.test_hub_customer", "empty": false, "fqn": ["snow_vault", "feature_sql_files", "test_hub_customer"], "tags": ["feature"], "config": {"enabled": true, "materialized": "incremental", "post-hook": [], "tags": ["feature"], "pre-hook": [], "column_types": {}, "vars": {"date": "TO_DATE('1992-01-08')", "history_date": "TO_DATE('1992-01-08')"}, "quoting": {}, "persist_docs": {}, "schema": "test_vlt"}, "schema": "SRC_test_vlt", "database": "DV_PROTOTYPE_DB", "alias": "test_hub_customer", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\nSELECT\n                CAST(CUSTOMER_PK AS BINARY(16)) AS CUSTOMER_PK,\n                CAST(CUSTOMERKEY AS NUMBER(38,0)) AS CUSTOMERKEY,\n                CAST(SOURCE AS VARCHAR(4)) AS SOURCE,\n                CAST(LOADDATE AS DATE) AS LOADDATE\n\n FROM (\n  SELECT DISTINCT CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE, FIRST_SOURCE\n  FROM\n    (SELECT DISTINCT a.CUSTOMER_PK, a.CUSTOMERKEY, a.SOURCE, a.LOADDATE,\n                     lag(a.SOURCE, 1) over(partition by a.CUSTOMER_PK order by a.CUSTOMER_PK) as FIRST_SOURCE\n    FROM DV_PROTOTYPE_DB.SRC_TEST_STG.STG_CUSTOMER AS a\n    LEFT JOIN DV_PROTOTYPE_DB.SRC_test_vlt.test_hub_customer AS c\n    ON a.CUSTOMER_PK = c.CUSTOMER_PK\n    AND c.CUSTOMER_PK IS NULL) AS b)\nAS stg\nWHERE stg.CUSTOMER_PK NOT IN (SELECT CUSTOMER_PK FROM DV_PROTOTYPE_DB.SRC_test_vlt.test_hub_customer)\nAND FIRST_SOURCE IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nSELECT\n                CAST(CUSTOMER_PK AS BINARY(16)) AS CUSTOMER_PK,\n                CAST(CUSTOMERKEY AS NUMBER(38,0)) AS CUSTOMERKEY,\n                CAST(SOURCE AS VARCHAR(4)) AS SOURCE,\n                CAST(LOADDATE AS DATE) AS LOADDATE\n\n FROM (\n  SELECT DISTINCT CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE, FIRST_SOURCE\n  FROM\n    (SELECT DISTINCT a.CUSTOMER_PK, a.CUSTOMERKEY, a.SOURCE, a.LOADDATE,\n                     lag(a.SOURCE, 1) over(partition by a.CUSTOMER_PK order by a.CUSTOMER_PK) as FIRST_SOURCE\n    FROM DV_PROTOTYPE_DB.SRC_TEST_STG.STG_CUSTOMER AS a\n    LEFT JOIN DV_PROTOTYPE_DB.SRC_test_vlt.test_hub_customer AS c\n    ON a.CUSTOMER_PK = c.CUSTOMER_PK\n    AND c.CUSTOMER_PK IS NULL) AS b)\nAS stg\nWHERE stg.CUSTOMER_PK NOT IN (SELECT CUSTOMER_PK FROM DV_PROTOTYPE_DB.SRC_test_vlt.test_hub_customer)\nAND FIRST_SOURCE IS NULL", "wrapped_sql": "None", "build_path": "target/compiled/snow_vault/feature_sql_files/test_hub_customer.sql"}, "error": null, "skip": false, "status": "SUCCESS 0", "fail": null, "execution_time": 3.278761148452759, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-09-05T06:49:38.618159Z", "completed_at": "2019-09-05T06:49:38.633763Z"}, {"name": "execute", "started_at": "2019-09-05T06:49:38.633840Z", "completed_at": "2019-09-05T06:49:41.895464Z"}]}, {"node": {"name": "hub_customer", "root_path": "/home/alex/PycharmProjects/dbtTest", "resource_type": "model", "path": "hub_sat_link_load/hub_customer.sql", "original_file_path": "models/hub_sat_link_load/hub_customer.sql", "package_name": "dbtTest", "raw_sql": "{{config(materialized='incremental', schema='VLT', enabled=true, tags=['static', 'incremental'])}}\n\n{%- set src_table = ['src_stg.v_stg_orders']                              -%}\n{%- set src_cols = 'CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE'           -%}\n{%- set src_pk = ['CUSTOMER_PK']                                          -%}\n{%- set src_nk = ['CUSTOMERKEY']                                          -%}\n{%- set src_source = ['SOURCE']                                           -%}\n{%- set src_ldts = ['LOADDATE']                                           -%}\n\n{%- set tgt_pk = ['CUSTOMER_PK', 'BINARY(16)', 'CUSTOMER_PK']             -%}\n{%- set tgt_nk = ['CUSTOMERKEY', 'NUMBER(38,0)', 'CUSTOMERKEY']           -%}\n{%- set tgt_source = ['SOURCE', 'VARCHAR(4)', 'SOURCE']                   -%}\n{%- set tgt_ldts = ['LOADDATE', 'DATE', 'LOADDATE']                       -%}\n\n{%- set hash_model = [ref('stg_orders_hashed'), ref('stg_orders_hashed')] -%}\n\n{{ snow_vault.hub_template(src_table, src_cols, src_pk, src_nk, src_source, src_ldts,\n                           tgt_pk, tgt_nk, tgt_source, tgt_ldts, hash_model) }}", "refs": [["stg_orders_hashed"], ["stg_orders_hashed"]], "sources": [], "depends_on": {"nodes": ["model.dbtTest.stg_orders_hashed", "model.dbtTest.stg_orders_hashed"], "macros": []}, "unique_id": "model.dbtTest.hub_customer", "empty": false, "fqn": ["dbtTest", "hub_sat_link_load", "hub_customer"], "tags": ["static", "incremental"], "config": {"enabled": true, "materialized": "incremental", "post-hook": [], "tags": ["static", "incremental"], "pre-hook": [], "column_types": {}, "vars": {"date": "TO_DATE('1992-01-08')", "history_date": "TO_DATE('1992-01-08')"}, "quoting": {}, "persist_docs": {}, "schema": "VLT"}, "schema": "SRC_VLT", "database": "DV_PROTOTYPE_DB", "alias": "hub_customer", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n                CAST(CUSTOMER_PK AS BINARY(16)) AS CUSTOMER_PK,\n                CAST(CUSTOMERKEY AS NUMBER(38,0)) AS CUSTOMERKEY,\n                CAST(SOURCE AS VARCHAR(4)) AS SOURCE,\n                CAST(LOADDATE AS DATE) AS LOADDATE\n FROM (\n  SELECT DISTINCT CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE, FIRST_SOURCE\n  FROM\n    (SELECT DISTINCT a.CUSTOMER_PK, a.CUSTOMERKEY, a.SOURCE, a.LOADDATE,\n           lag(a.SOURCE, 1)\n           over(partition by a.CUSTOMER_PK\n           order by a.CUSTOMER_PK) as FIRST_SOURCE\n    FROM DV_PROTOTYPE_DB.SRC_STG.stg_orders_hashed AS a\n    LEFT JOIN DV_PROTOTYPE_DB.SRC_VLT.hub_customer AS c\n    ON a.CUSTOMER_PK = c.CUSTOMER_PK\n    AND c.CUSTOMER_PK IS NULL\n    )\n AS b)\nAS stg\nWHERE stg.CUSTOMER_PK NOT IN (SELECT CUSTOMER_PK FROM DV_PROTOTYPE_DB.SRC_VLT.hub_customer)\nAND FIRST_SOURCE IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n                CAST(CUSTOMER_PK AS BINARY(16)) AS CUSTOMER_PK,\n                CAST(CUSTOMERKEY AS NUMBER(38,0)) AS CUSTOMERKEY,\n                CAST(SOURCE AS VARCHAR(4)) AS SOURCE,\n                CAST(LOADDATE AS DATE) AS LOADDATE\n FROM (\n  SELECT DISTINCT CUSTOMER_PK, CUSTOMERKEY, SOURCE, LOADDATE, FIRST_SOURCE\n  FROM\n    (SELECT DISTINCT a.CUSTOMER_PK, a.CUSTOMERKEY, a.SOURCE, a.LOADDATE,\n           lag(a.SOURCE, 1)\n           over(partition by a.CUSTOMER_PK\n           order by a.CUSTOMER_PK) as FIRST_SOURCE\n    FROM DV_PROTOTYPE_DB.SRC_STG.stg_orders_hashed AS a\n    LEFT JOIN DV_PROTOTYPE_DB.SRC_VLT.hub_customer AS c\n    ON a.CUSTOMER_PK = c.CUSTOMER_PK\n    AND c.CUSTOMER_PK IS NULL\n    )\n AS b)\nAS stg\nWHERE stg.CUSTOMER_PK NOT IN (SELECT CUSTOMER_PK FROM DV_PROTOTYPE_DB.SRC_VLT.hub_customer)\nAND FIRST_SOURCE IS NULL", "wrapped_sql": "None", "build_path": "target/compiled/dbtTest/hub_sat_link_load/hub_customer.sql"}, "error": null, "skip": false, "status": "SUCCESS 0", "fail": null, "execution_time": 3.4503841400146484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-09-05T06:49:42.399293Z", "completed_at": "2019-09-05T06:49:42.434289Z"}, {"name": "execute", "started_at": "2019-09-05T06:49:42.434531Z", "completed_at": "2019-09-05T06:49:45.848202Z"}]}], "generated_at": "2019-09-05T06:49:46.882668Z", "elapsed_time": 19.64146399497986}