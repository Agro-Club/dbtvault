{"nodes": {}, "sources": {}, "macros": {"macro.dbtvault.replace_placeholder_with_filter": {"unique_id": "macro.dbtvault.replace_placeholder_with_filter", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "replace_placeholder_with_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_filter',\n                                    packages = ['dbtvault'])(core_sql=core_sql,\n                                                             timestamp_field=timestamp_field,\n                                                             start_timestamp=start_timestamp,\n                                                             stop_timestamp=stop_timestamp,\n                                                             offset=offset,\n                                                             period=period) %}\n    {% do return(macro) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Replace the `__PERIOD_FILTER__` string present in the given SQL, with a `WHERE` clause which filters data by a\nspecific `period` of time, `offset` from the `start_date`.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "core_sql", "type": "string", "description": "SQL string containing the `__PERIOD_FILTER__` string."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "start_timestamp", "type": "string", "description": "The starting timestamp for the range of records to be loaded. \nRecords must have a timestamp greater or equal to this value to be included."}, {"name": "stop_timestamp", "type": "string", "description": "The stopping timestamp for the range of records to be loaded. \nRecords must have a timestamp less than this value to be included."}, {"name": "offset", "type": "integer", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}]}, "macro.dbtvault.snowflake__replace_placeholder_with_filter": {"unique_id": "macro.dbtvault.snowflake__replace_placeholder_with_filter", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "snowflake__replace_placeholder_with_filter", "macro_sql": "{% macro snowflake__replace_placeholder_with_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n            (TO_DATE({{ timestamp_field }}) >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\n             TO_DATE({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\n      AND (TO_DATE({{ timestamp_field }}) >= TO_DATE('{{ start_timestamp }}'))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Replace the `__PERIOD_FILTER__` string present in the given SQL, with a `WHERE` clause which filters data by a\nspecific `period` of time, `offset` from the `start_date`.\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_snowflake_schema.yml", "arguments": [{"name": "core_sql", "type": "string", "description": "SQL string containing the `__PERIOD_FILTER__` string."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "start_timestamp", "type": "string", "description": "The starting timestamp for the range of records to be loaded. \nRecords must have a timestamp greater or equal to this value to be included."}, {"name": "stop_timestamp", "type": "string", "description": "The stopping timestamp for the range of records to be loaded. \nRecords must have a timestamp less than this value to be included."}, {"name": "offset", "type": "integer", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}]}, "macro.dbtvault.get_period_filter_sql": {"unique_id": "macro.dbtvault.get_period_filter_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "get_period_filter_sql", "macro_sql": "\n\n{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {% set macro = adapter.dispatch('get_period_filter_sql',\n                                    packages = ['dbtvault'])(target_cols_csv=target_cols_csv,\n                                                             base_sql=base_sql,\n                                                             timestamp_field=timestamp_field,\n                                                             period=period,\n                                                             start_timestamp=start_timestamp,\n                                                             stop_timestamp=stop_timestamp,\n                                                             offset=offset) %}\n    {% do return(macro) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A wrapper around the `replace_placeholder_with_filter` macro which creates a query designed to\nbuild a temporary table, to select the necessary records for the given load cycle.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "target_cols_csv", "type": "string", "description": "A CSV string of the columns to be created in the target table \n(the table the model is creating with this materialisation)"}, {"name": "base_sql", "type": "string", "description": "The SQL provided by the model, prior to any manipulation."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}, {"name": "start_timestamp", "type": "string", "description": "The starting timestamp for the range of records to be loaded. \nRecords must have a timestamp greater or equal to this value to be included."}, {"name": "stop_timestamp", "type": "string", "description": "The stopping timestamp for the range of records to be loaded. \nRecords must have a timestamp less than this value to be included."}, {"name": "offset", "type": "string", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}]}, "macro.dbtvault.snowflake__get_period_filter_sql": {"unique_id": "macro.dbtvault.snowflake__get_period_filter_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "snowflake__get_period_filter_sql", "macro_sql": "{% macro snowflake__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_filter(filtered_sql.sql,\n                                                                                timestamp_field,\n                                                                                start_timestamp,\n                                                                                stop_timestamp,\n                                                                                offset, period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A wrapper around the `replace_placeholder_with_filter` macro which creates a query designed to\nbuild a temporary table, to select the necessary records for the given load cycle.\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_snowflake_schema.yml", "arguments": [{"name": "target_cols_csv", "type": "string", "description": "A CSV string of the columns to be created in the target table \n(the table the model is creating with this materialisation)"}, {"name": "base_sql", "type": "string", "description": "The SQL provided by the model, prior to any manipulation."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}, {"name": "start_timestamp", "type": "string", "description": "The starting timestamp for the range of records to be loaded. \nRecords must have a timestamp greater or equal to this value to be included."}, {"name": "stop_timestamp", "type": "string", "description": "The stopping timestamp for the range of records to be loaded. \nRecords must have a timestamp less than this value to be included."}, {"name": "offset", "type": "string", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}]}, "macro.dbtvault.get_period_boundaries": {"unique_id": "macro.dbtvault.get_period_boundaries", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "get_period_boundaries", "macro_sql": "\n\n{%- macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set macro = adapter.dispatch('get_period_boundaries',\n                                    packages = ['dbtvault'])(target_schema=target_schema,\n                                                             target_table=target_table,\n                                                             timestamp_field=timestamp_field,\n                                                             start_date=start_date,\n                                                             stop_date=stop_date,\n                                                             period=period) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Get the start and stop timestamp, as well as the number of periods/iterations which need to be made to do the full load.\nIt is important to note that this materialisation handles the idempotent nature of the materialisation by running a `COALESCE`\non the maximal date found in the target table if it already exists, and the provided `start_date`. \n\nThis also allows the materialisation to handle aborted loads.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "target_schema", "type": "string", "description": "The schema that the target table is materialised in."}, {"name": "target_table", "type": "string", "description": "The name of the materialised target table."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "start_date", "type": "string", "description": "The date stamp to start loading from. Must be in the format 'YYYY-MM-DD'"}, {"name": "stop_date", "type": "string", "description": "THe date stamp to stop loading on. Must be in the format 'YYYY-MM-DD'"}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}]}, "macro.dbtvault.snowflake__get_period_boundaries": {"unique_id": "macro.dbtvault.snowflake__get_period_boundaries", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "snowflake__get_period_boundaries", "macro_sql": "{% macro snowflake__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set period_boundary_sql -%}\n        with data as (\n            select\n                coalesce(max({{ timestamp_field }}), '{{ start_date }}')::timestamp as start_timestamp,\n                coalesce({{ dbt_utils.dateadd('millisecond', 86399999, \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n                         {{ dbt_utils.current_timestamp() }} ) as stop_timestamp\n            from {{ target_schema }}.{{ target_table }}\n        )\n        select\n            start_timestamp,\n            stop_timestamp,\n            {{ dbt_utils.datediff('start_timestamp',\n                                  'stop_timestamp',\n                                  period) }} + 1 as num_periods\n        from data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbt_utils.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Get the start and stop timestamp, as well as the number of periods/iterations which need to be made to do the full load.\nIt is important to note that this materialisation handles the idempotent nature of the materialisation by running a `COALESCE`\non the maximal date found in the target table if it already exists, and the provided `start_date`. \n\nThis also allows the materialisation to handle aborted loads.\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_snowflake_schema.yml", "arguments": [{"name": "target_schema", "type": "string", "description": "The schema that the target table is materialised in."}, {"name": "target_table", "type": "string", "description": "The name of the materialised target table."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "start_date", "type": "string", "description": "The date stamp to start loading from. Must be in the format 'YYYY-MM-DD'"}, {"name": "stop_date", "type": "string", "description": "THe date stamp to stop loading on. Must be in the format 'YYYY-MM-DD'"}, {"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}]}, "macro.dbtvault.get_period_of_load": {"unique_id": "macro.dbtvault.get_period_of_load", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "get_period_of_load", "macro_sql": "\n\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set macro = adapter.dispatch('get_period_of_load',\n                                    packages = ['dbtvault'])(period=period,\n                                                             offset=offset,\n                                                             start_timestamp=start_timestamp) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A helper macro to fetch the date of the current load cycle.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}, {"name": "offset", "type": "string", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}, {"name": "start_timestamp", "type": "string", "description": "The `start_timestamp` of the load, derived from the `start_date`."}]}, "macro.dbtvault.snowflake__get_period_of_load": {"unique_id": "macro.dbtvault.snowflake__get_period_of_load", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "snowflake__get_period_of_load", "macro_sql": "\n\n{%- macro snowflake__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_DATE('{{start_timestamp}}'))) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = dbt_utils.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A helper macro to fetch the date of the current load cycle.\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_snowflake_schema.yml", "arguments": [{"name": "period", "type": "string", "description": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}, {"name": "offset", "type": "string", "description": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}, {"name": "start_timestamp", "type": "string", "description": "The `start_timestamp` of the load, derived from the `start_date`."}]}, "macro.dbtvault.is_vault_insert_by_period": {"unique_id": "macro.dbtvault.is_vault_insert_by_period", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_period'\n                      and not flags.FULL_REFRESH) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Check that a model is using the `vault_insert_by_period` materialisation.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": []}, "macro.dbtvault.check_placeholder": {"unique_id": "macro.dbtvault.check_placeholder", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "check_placeholder", "macro_sql": "{% macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') %}\n\n    {%- if model_sql.find(placeholder) == -1 -%}\n        {%- set error_message -%}\n            Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n        {%- endset -%}\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Searches the given SQL string for an expected placeholder, throwing an error if it is not found.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "model_sql", "type": "string", "description": "The SQL string to search."}, {"name": "placeholder", "type": "string", "description": "Optional. Default: `__PERIOD_FILTER__`\n\nThe placeholder to search for."}]}, "macro.dbtvault.get_start_stop_dates": {"unique_id": "macro.dbtvault.get_start_stop_dates", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/helpers.sql", "original_file_path": "macros/materialisations/helpers.sql", "name": "get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(mat_config, timestamp_field, date_source_models) %}\n\n    {% if config.get('start_date', default=none) is not none %}\n\n        {%- set start_date = config.get('start_date') -%}\n        {%- set stop_date = config.get('stop_date', default=none) -%}\n\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\n\n    {% elif date_source_models is not none %}\n\n        {% if date_source_models is string %}\n            {% set date_source_models = [date_source_models] %}\n        {% endif %}\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in date_source_models %}\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = dbt_utils.get_query_results_as_dict(query_sql) %}\n\n        {% set start_date = min_max_dict['MIN'][0] | string %}\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\n\n        {% do return(min_max_dates) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date' and/or 'date_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A helper macro to fetch the start and stop dates to load with. It will either infer the date range from the min and max \ndates present in the tables in `date_source_models` list, or alternatively use the `start_date` and `stop_date` \nconfig options. The config options take precedence if both are provided. A suitable error is raised if neither is provided.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/helpers_schema.yml", "arguments": [{"name": "mat_config", "type": "dict", "description": "The `config` variable provided to the materialisation macro."}, {"name": "timestamp_field", "type": "string", "description": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, {"name": "date_source_models", "type": "string/list", "description": "A list of models to union together and extract min and max dates from, which will be used as the range to load records with."}]}, "macro.dbtvault.materialization_vault_insert_by_period_default": {"unique_id": "macro.dbtvault.materialization_vault_insert_by_period_default", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/materialisations/vault_insert_by_period_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_period_materialization.sql", "name": "materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\n\n    {%- set full_refresh_mode = flags.FULL_REFRESH -%}\n\n    {%- set target_relation = this -%}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(this) -%}\n\n    {%- set timestamp_field = config.require('timestamp_field') -%}\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\n\n    {%- set start_stop_dates = dbtvault.get_start_stop_dates(config, timestamp_field, date_source_models) | as_native -%}\n\n    {%- set period = config.get('period', default='day') -%}\n    {%- set to_drop = [] -%}\n\n    {%- do dbtvault.check_placeholder(sql) -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif existing_relation.is_view or full_refresh_mode %}\n        {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n        {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n        {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n        {% do adapter.drop_relation(backup_relation) %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(backup_relation) %}\n    {% else %}\n\n        {% set period_boundaries = dbtvault.get_period_boundaries(schema,\n                                                                  target_relation.name,\n                                                                  timestamp_field,\n                                                                  start_stop_dates.start_date,\n                                                                  start_stop_dates.stop_date,\n                                                                  period) %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(period_boundaries.num_periods) -%}\n\n            {%- set iteration_number = i + 1 -%}\n            {%- set period_of_load = dbtvault.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(this) %}\n            {% set tmp_table_sql = dbtvault.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\n                                                                  period_boundaries.start_timestamp,\n                                                                  period_boundaries.stop_timestamp, i) %}\n\n            {% call statement() -%}\n                {{ dbt.create_table_as(True, tmp_relation, tmp_table_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                insert into {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    select {{ target_cols_csv }}\n                    from {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {%- set rows_inserted = (load_result(insert_query_name)['status'].split(\" \"))[1] | int -%}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- set _ = loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\n                                                                                              period_boundaries.num_periods,\n                                                                                              period_of_load, rows_inserted,\n                                                                                              model.unique_id)) }}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n\n        {% call noop_statement(name='main', status=\"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            -- no-op\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {%- set rows_inserted = (load_result(\"main\")['status'].split(\" \"))[1] | int -%}\n\n        {% call noop_statement(name='main', status=\"BASE LOAD {}\".format(rows_inserted)) -%}\n            -- no-op\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {{ drop_relation_if_exists(backup_relation) }}\n    {% endfor %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A materialisation designed to iterate through source data and load it in discrete periods of time, configurable by the user.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/materialisations/materialisations_schema.yml", "arguments": []}, "macro.dbtvault.alias_all": {"unique_id": "macro.dbtvault.alias_all", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/alias_all.sql", "original_file_path": "macros/internal/alias_all.sql", "name": "alias_all", "macro_sql": "{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', packages = ['dbtvault'])(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Perform aliasing on a mapping and optionally prefix the string as well.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": [{"name": "columns", "type": "string", "description": "A list of columns, as strings or mappings.\n\ne.g.\n\n```\nsrc_hashdiff: \n  source_column: \"CUSTOMER_HASHDIFF\"\n  alias: \"HASHDIFF\"\n```"}, {"name": "prefix", "type": "string", "description": "A string to prefix all columns with."}]}, "macro.dbtvault.default__alias_all": {"unique_id": "macro.dbtvault.default__alias_all", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/alias_all.sql", "original_file_path": "macros/internal/alias_all.sql", "name": "default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if columns is iterable and columns is not string -%}\n\n    {%- for column in columns -%}\n        {{ dbtvault.alias(alias_config=column, prefix=prefix) }}\n        {%- if not loop.last -%} , {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ dbtvault.alias(alias_config=columns, prefix=prefix) }}\n\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbtvault.prepend_generated_by": {"unique_id": "macro.dbtvault.prepend_generated_by", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/prepend_generated_by.sql", "original_file_path": "macros/internal/prepend_generated_by.sql", "name": "prepend_generated_by", "macro_sql": "{%- macro prepend_generated_by() -%}\n-- Generated by dbtvault.\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A convenience macro to print a `-- Generated by dbtvault.` string.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": []}, "macro.dbtvault.multikey": {"unique_id": "macro.dbtvault.multikey", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/multikey.sql", "original_file_path": "macros/internal/multikey.sql", "name": "multikey", "macro_sql": "{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {{- adapter.dispatch('multikey', packages = ['dbtvault'])(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Apply the same conditions and comparisons to a list of columns/keys. \n\ne.g. Given the following argument values:\n\ncolumns = ['CUSTOMER_ID', 'NATION_ID']\nprefix = ['a', 'b']\ncondition = '='\noperator = 'AND'\n\nThe macro would render this as:\n\n```\na.CUSTOMER_ID = b.CUSTOMER_ID\nAND a.NATION_ID = b.NATION_ID \n```", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of columns to generate comparisons for."}, {"name": "prefix", "type": "string/list", "description": "A pair of prefixes, one for each side of the comparison."}, {"name": "condition", "type": "string", "description": "The comparison to make between the keys, should be one of: \n\n'<>', '!=', '='"}, {"name": "operator", "type": "string", "description": "The operator to join the conditions with, defaults to 'AND', but could also be 'OR'."}]}, "macro.dbtvault.default__multikey": {"unique_id": "macro.dbtvault.default__multikey", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/multikey.sql", "original_file_path": "macros/internal/multikey.sql", "name": "default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ col }} {{ condition }} {{ prefix[1] ~ '.' if prefix }}{{ col }}\n            {%- if not loop.last %} {{ operator }} {% endif %}\n        {% endfor -%}\n    {%- else -%}\n        {%- if columns is iterable and columns is not string -%}\n            {%- for col in columns -%}\n                {{ prefix[0] ~ '.' if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbtvault.alias": {"unique_id": "macro.dbtvault.alias", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/alias.sql", "original_file_path": "macros/internal/alias.sql", "name": "alias", "macro_sql": "{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', packages = ['dbtvault'])(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Perform aliasing on a mapping and optionally prefix the string as well.\n\nSee also:\n[alias_all](#!/macro/macro.dbtvault.alias_all)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": [{"name": "alias_config", "type": "Mapping", "description": "A mapping, containing a configuration for the aliasing. \n                                                \n| Key           | Description          | Type   |\n| ------------- | -------------------- | ------ |\n| source_column | Column being aliased | string |\n| alias         | Column alias         | string |"}, {"name": "prefix", "type": "String", "description": "A string to prefix the column with."}]}, "macro.dbtvault.default__alias": {"unique_id": "macro.dbtvault.default__alias", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/alias.sql", "original_file_path": "macros/internal/alias.sql", "name": "default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config -%}\n\n    {%- if alias_config is iterable and alias_config is not string -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- dbtvault.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbtvault.expand_column_list": {"unique_id": "macro.dbtvault.expand_column_list", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/expand_column_list.sql", "original_file_path": "macros/internal/expand_column_list.sql", "name": "expand_column_list", "macro_sql": "{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- if execute -%}\n         {{ exceptions.raise_compiler_error(\"Expected a list of columns, got: \" ~ columns) }}\n    {%- endif -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if columns is iterable -%}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- set _ = col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif col is iterable and col is not string -%}\n\n            {%- if col is mapping -%}\n\n                {%- set _ = col_list.append(col) -%}\n\n            {%- else -%}\n\n                {%- for cols in col -%}\n\n                    {%- set _ = col_list.append(cols) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- endif -%}\n\n{% do return(col_list) %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Flatten a nested list structure into a single list so that it may be rendered in CSV format or provided to other macros.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of lists to flatten. May contain strings as well, these will be added as single items in the returned list."}]}, "macro.dbtvault.as_constant": {"unique_id": "macro.dbtvault.as_constant", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/as_constant.sql", "original_file_path": "macros/internal/as_constant.sql", "name": "as_constant", "macro_sql": "{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', packages = ['dbtvault'])(column_str=column_str) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Render a string as a constant value if it is prefixed with an exclamation mark (`!`) otherwise, return as provided.", "meta": {}, "docs": {"show": true}, "patch_path": "macros/internal/internal_schema.yml", "arguments": [{"name": "column_str", "type": "string", "description": "The string to parse as a constant."}]}, "macro.dbtvault.default__as_constant": {"unique_id": "macro.dbtvault.default__as_constant", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/internal/as_constant.sql", "original_file_path": "macros/internal/as_constant.sql", "name": "default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {% if column_str is not none %}\n\n        {%- if column_str | first == \"!\" -%}\n        \n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n        \n        {%- else -%}\n        \n            {{- return(column_str) -}}\n        \n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbtvault.derive_columns": {"unique_id": "macro.dbtvault.derive_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "name": "derive_columns", "macro_sql": "{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', packages = ['dbtvault'])(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro used by the `stage` macro internally, which processes a mapping of new columns to source columns, in order to generate new columns. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#derive_columns)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_schema.yml", "arguments": [{"name": "source_relation", "type": "Relation", "description": "The source relation to extract columns from, for deriving from."}, {"name": "columns", "type": "list", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}]}, "macro.dbtvault.snowflake__derive_columns": {"unique_id": "macro.dbtvault.snowflake__derive_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "name": "snowflake__derive_columns", "macro_sql": "\n\n{%- macro snowflake__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n\n{%- if source_relation is defined and source_relation is not none -%}\n    {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n{%- endif %}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of provided columns to excludes and full SQL to includes -#}\n    {%- for col in columns -%}\n\n        {% set column_str = dbtvault.as_constant(columns[col]) %}\n\n        {%- set _ = include_columns.append(column_str ~ \" AS \" ~ col) -%}\n        {%- set _ = exclude_columns.append(col) -%}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- if source_col.column not in exclude_columns -%}\n                {%- set _ = include_columns.append(source_col.column) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif %}\n\n    {#- Print out all columns in includes -#}\n    {%- for col in include_columns -%}\n        {{ col }}\n        {%- if not loop.last -%},\n{% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is none and source_relation is not none -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- for source_col in source_model_cols -%}\n        {%- if source_col.column not in exclude_columns -%}\n            {%- set _ = include_columns.append(source_col.column) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- Print out all columns in includes -#}\n    {%- for col in include_columns -%}\n        {{ col }}\n        {{- ',\\n' if not loop.last -}}\n\n    {%- endfor -%}\n\n{%- else -%}\n\n{%- if execute -%}\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\nexpected format: {source_relation: Relation, columns: 'column_mapping'}\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n{%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro used by the `stage` macro internally, which processes a mapping of new columns to source columns, in order to generate new columns. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#derive_columns)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_snowflake_schema.yml", "arguments": [{"name": "source_relation", "type": "Relation", "description": "The source relation to extract columns from, for deriving from."}, {"name": "columns", "type": "list", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}]}, "macro.dbtvault.hash_columns": {"unique_id": "macro.dbtvault.hash_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "name": "hash_columns", "macro_sql": "{%- macro hash_columns(columns=none) -%}\n\n    {{- adapter.dispatch('hash_columns', packages = ['dbtvault'])(columns=columns) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro used by the `stage` macro internally, which processes a mapping of hash key names to source columns, in order to generate hash keys. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#hash_columns)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}]}, "macro.dbtvault.snowflake__hash_columns": {"unique_id": "macro.dbtvault.snowflake__hash_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "name": "snowflake__hash_columns", "macro_sql": "\n\n{%- macro snowflake__hash_columns(columns=none) -%}\n\n{%- if columns is mapping -%}\n\n    {%- for col in columns -%}\n\n        {% if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n            {{- dbtvault.hash(columns=columns[col]['columns'], \n                              alias=col, \n                              is_hashdiff=columns[col]['is_hashdiff']) -}}\n\n        {%- elif columns[col] is not mapping -%}\n\n            {{- dbtvault.hash(columns=columns[col], \n                              alias=col, \n                              is_hashdiff=false) -}}\n        \n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n            {%- if execute -%}\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n            {% endif %}\n\n            {{- dbtvault.hash(columns=columns[col]['columns'], \n                              alias=col) -}}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},\n{% endif %}\n    {%- endfor -%}\n\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro used by the `stage` macro internally, which processes a mapping of hash key names to source columns, in order to generate hash keys. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#hash_columns)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_snowflake_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}]}, "macro.dbtvault.stage": {"unique_id": "macro.dbtvault.stage", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "name": "stage", "macro_sql": "{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none) -%}\n\n    {% if include_source_columns is none %}\n        {%- set include_source_columns = true -%}\n    {% endif %}\n\n    {{- adapter.dispatch('stage', packages = ['dbtvault'])(include_source_columns=include_source_columns, source_model=source_model, hashed_columns=hashed_columns, derived_columns=derived_columns) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro to aid in generating a staging layer for the raw vault. Allows users to:\n\n- Create new columns from already existing columns (Derived columns)\n- Create new hashed columns from already existing columns (Hashed columns)\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#stage)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_schema.yml", "arguments": [{"name": "include_source_columns", "type": "boolean", "description": "True by default. If true, all columns included in the source model for the stage layer, will be propagated to the stage layer.\n\nIf false, only derived and hash columns (if configured) will be present in the resulting stage layer."}, {"name": "source_model", "type": "string", "description": "The dbt model name or source to build a staging layer from. Can be provided in the following formats:\n\n```\n[REF STYLE]\nsource_model: model_name\nOR\n[SOURCES STYLE]\nsource_model:\n    source_name: source_table_name\"\n```"}, {"name": "hashed_columns", "type": "Mapping", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}, {"name": "derived_columns", "type": "Mapping", "description": "A mapping of new column names to existing columns which should be hashed to create that key.\n\ne.g.\n\n```\nderived_columns:\n    NATION_KEY: 'SUPPLIER_NATION_KEY'\n    REGION_KEY: 'SUPPLIER_REGION_KEY'\n    SOURCE: '!TPCH-INVENTORY'\n```"}]}, "macro.dbtvault.snowflake__stage": {"unique_id": "macro.dbtvault.snowflake__stage", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "name": "snowflake__stage", "macro_sql": "{%- macro snowflake__stage(include_source_columns, source_model, hashed_columns, derived_columns) -%}\n-- Generated by dbtvault.\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    \"Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g. \n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n    source_name: source_table_name\"\n    {%- endset -%}\n    \n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\nSELECT\n\n{# Create relation object from provided source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n{%- endif -%}\n\n{#- Hash columns, if provided -#}\n{% if hashed_columns is defined and hashed_columns is not none -%}\n    \n    {{ dbtvault.hash_columns(columns=hashed_columns) -}}\n    {{ \",\" if derived_columns is defined and source_relation is defined and include_source_columns }}\n\n{% endif -%}\n\n{#- Derive additional columns, if provided -#}\n{%- if derived_columns is defined and derived_columns is not none -%}\n\n    {%- if include_source_columns -%}\n    {{ dbtvault.derive_columns(source_relation=source_relation, columns=derived_columns) }}\n    {%- else -%}\n    {{ dbtvault.derive_columns(columns=derived_columns) }}\n    {%- endif -%}\n{#- If source relation is defined but derived_columns is not, add columns from source model. -#}\n{%- elif source_relation is defined and include_source_columns is true -%}\n \n    {{ dbtvault.derive_columns(source_relation=source_relation) }}\n{%- endif %}\n\nFROM {{ source_relation }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro to aid in generating a staging layer for the raw vault. Allows users to:\n\n- Create new columns from already existing columns (Derived columns)\n- Create new hashed columns from already existing columns (Hashed columns)\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#stage)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/staging/staging_snowflake_schema.yml", "arguments": [{"name": "include_source_columns", "type": "boolean", "description": "True by default. If true, all columns included in the source model for the stage layer, will be propagated to the stage layer.\n\nIf false, only derived and hash columns (if configured) will be present in the resulting stage layer."}, {"name": "source_model", "type": "string", "description": "The dbt model name or source to build a staging layer from. Can be provided in the following formats:\n\n```\n[REF STYLE]\nsource_model: model_name\nOR\n[SOURCES STYLE]\nsource_model:\n    source_name: source_table_name\"\n```"}, {"name": "hashed_columns", "type": "Mapping", "description": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}, {"name": "derived_columns", "type": "Mapping", "description": "A mapping of new column names to existing columns which should be hashed to create that key.\n\ne.g.\n\n```\nderived_columns:\n    NATION_KEY: 'SUPPLIER_NATION_KEY'\n    REGION_KEY: 'SUPPLIER_REGION_KEY'\n    SOURCE: '!TPCH-INVENTORY'\n```"}]}, "macro.dbtvault.prefix": {"unique_id": "macro.dbtvault.prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "name": "prefix", "macro_sql": "{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', packages = ['dbtvault'])(columns=columns, prefix_str=prefix_str, alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prefix one or more strings with a given string and print each one.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#prefix)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/supporting/supporting_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of columns (string or mapping) to prefix.\n\nIf a column is specified using an alias mapping as follows:\n\n{'source_column': <'column name'>, 'alias': <'alias string'>}\n\nThen it will also be aliased using `AS <column name>`."}, {"name": "prefix_str", "type": "string", "description": "The string to prepend to each column/string."}, {"name": "alias_target", "type": "source | target", "description": "Switch the aliasing target. `source` by default.\n\nIf a column is specified using an alias mapping as follows:\n\n`{'source_column': <'column name'>, 'alias': <'alias string'>}`\n\nThen it will also be aliased using `AS <column name>`.\n\nHowever, if the `alias_target` is `target` instead of `source`, the column will be rendered as follows:\n\n`AS <alias string>`"}]}, "macro.dbtvault.snowflake__prefix": {"unique_id": "macro.dbtvault.snowflake__prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "name": "snowflake__prefix", "macro_sql": "{%- macro snowflake__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col is mapping -%}\n\n                {%- if alias_target == 'source' -%}\n\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\n\n                {%- elif alias_target == 'target' -%}\n\n                    {{- dbtvault.prefix([col['alias']], prefix_str) -}}\n\n                {%- else -%}\n\n                    {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\n\n                {%- endif -%}\n\n                {%- if not loop.last -%} , {% endif %}\n\n            {%- else -%}\n\n                {%- if col is iterable and col is not string -%}\n\n                    {{- dbtvault.prefix(col, prefix_str) -}}\n\n                {%- elif col is not none -%}\n\n                    {{- prefix_str}}.{{col.strip() -}}\n                {% else %}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                    {%- endif -%}\n                {%- endif -%}\n\n                {{- ', ' if not loop.last -}}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Prefix one or more strings with a given string and print each one.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#prefix)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/supporting/supporting_snowflake_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of columns (string or mapping) to prefix.\n\nIf a column is specified using an alias mapping as follows:\n\n{'source_column': <'column name'>, 'alias': <'alias string'>}\n\nThen it will also be aliased using `AS <column name>`."}, {"name": "prefix_str", "type": "string", "description": "The string to prepend to each column/string."}, {"name": "alias_target", "type": "source | target", "description": "Switch the aliasing target. `source` by default.\n\nIf a column is specified using an alias mapping as follows:\n\n`{'source_column': <'column name'>, 'alias': <'alias string'>}`\n\nThen it will also be aliased using `AS <column name>`.\n\nHowever, if the `alias_target` is `target` instead of `source`, the column will be rendered as follows:\n\n`AS <alias string>`"}]}, "macro.dbtvault.hash": {"unique_id": "macro.dbtvault.hash", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "name": "hash", "macro_sql": "{%- macro hash(columns=none, alias=none, is_hashdiff=false) -%}\n\n    {% if is_hashdiff is none %}\n        {%- set is_hashdiff = false -%}\n    {% endif %}\n\n    {{- adapter.dispatch('hash', packages = ['dbtvault'])(columns=columns, alias=alias, is_hashdiff=is_hashdiff) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Generate SQL to hash one or more columns using MD5 or SHA256. \n\nSee [How do we hash?](https://dbtvault.readthedocs.io/en/latest/best_practices/#how-do-we-hash) for an in-depth look at how dbtvault does hashing. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hash)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/supporting/supporting_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of one or more columns to hash."}, {"name": "alias", "type": "string", "description": "The alias (name) for the new column output using the hash macro."}, {"name": "is_hashdiff", "type": "boolean", "description": "Boolean flag. If true, sort the column names in alphabetical order prior to hashing.\nThis is required for hashdiffs to ensure consistent hashing."}]}, "macro.dbtvault.snowflake__hash": {"unique_id": "macro.dbtvault.snowflake__hash", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "name": "snowflake__hash", "macro_sql": "\n\n{%- macro snowflake__hash(columns, alias, is_hashdiff) -%}\n\n{%- set hash = var('hash', 'MD5') -%}\n\n{#- Select hashing algorithm -#}\n{%- if hash == 'MD5' -%}\n    {%- set hash_alg = 'MD5_BINARY' -%}\n    {%- set hash_size = 16 -%}\n{%- elif hash == 'SHA' -%}\n    {%- set hash_alg = 'SHA2_BINARY' -%}\n    {%- set hash_size = 32 -%}\n{%- else -%}\n    {%- set hash_alg = 'MD5_BINARY' -%}\n    {%- set hash_size = 16 -%}\n{%- endif -%}\n\n{%- set standardise = \"NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS VARCHAR))), '')\" %}\n\n{#- Alpha sort columns before hashing if a hashdiff -#}\n{%- if is_hashdiff and columns is iterable and columns is not string -%}\n    {%- set columns = columns|sort -%}\n{%- endif -%}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set column_str = dbtvault.as_constant(columns) -%}\n    CAST(({{ hash_alg }}({{ standardise | replace('[EXPRESSION]', column_str) }})) AS BINARY({{ hash_size }})) AS {{ alias }}\n\n{#- Else a list of columns to hash -#}\n{%- else -%}\n\nCAST({{ hash_alg }}(CONCAT(\n\n{%- for column in columns %}\n\n{%- set column_str = dbtvault.as_constant(column) -%}\n\n{%- if not loop.last %}\n    IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '^^'), '||',\n{%- else %}\n    IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '^^') ))\nAS BINARY({{ hash_size }})) AS {{ alias }}\n{%- endif -%}\n\n{%- endfor -%}\n{%- endif -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Generate SQL to hash one or more columns using MD5 or SHA256. \n\nSee [How do we hash?](https://dbtvault.readthedocs.io/en/latest/best_practices/#how-do-we-hash) for an in-depth look at how dbtvault does hashing. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hash)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/supporting/supporting_snowflake_schema.yml", "arguments": [{"name": "columns", "type": "list", "description": "A list of one or more columns to hash."}, {"name": "alias", "type": "string", "description": "The alias (name) for the new column output using the hash macro."}, {"name": "is_hashdiff", "type": "boolean", "description": "Boolean flag. If true, sort the column names in alphabetical order prior to hashing.\nThis is required for hashdiffs to ensure consistent hashing."}]}, "macro.dbtvault.link": {"unique_id": "macro.dbtvault.link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/link.sql", "original_file_path": "macros/tables/link.sql", "name": "link", "macro_sql": "{%- macro link(src_pk, src_fk, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('link', packages = ['dbtvault'])(src_pk=src_pk, src_fk=src_fk,\n                                                          src_ldts=src_ldts, src_source=src_source,\n                                                          source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Link contains a distinct set of relationships between top-level business concepts. \nThese structures 'link' hubs together based on a business relationship between the two.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#link)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_fk", "type": "mapping/string", "description": "A single column or list of columns which are the primary key columns of other, related tables. Used in links to shows hubs associated with the link."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.snowflake__link": {"unique_id": "macro.dbtvault.snowflake__link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/link.sql", "original_file_path": "macros/tables/link.sql", "name": "snowflake__link", "macro_sql": "{%- macro snowflake__link(src_pk, src_fk, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = (loop.index | string) -%}\n\nrank_{{ source_number }} AS (\n    SELECT {{ source_cols | join(', ') }},\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ src_pk }}\n               ORDER BY {{ src_ldts }} ASC\n           ) AS row_number\n    FROM {{ ref(src) }}\n),\nstage_{{ source_number }} AS (\n    SELECT DISTINCT {{ source_cols | join(', ') }}\n    FROM rank_{{ source_number }}\n    WHERE row_number = 1\n),\n{% endfor -%}\n\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM stage_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n),\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_period_filter AS (\n    SELECT *\n    FROM stage_union\n    WHERE __PERIOD_FILTER__\n),\n{%- endif %}\nrank_union AS (\n    SELECT *,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ src_pk }}\n               ORDER BY {{ src_ldts }}, {{ src_source }} ASC\n           ) AS row_number\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    FROM stage_period_filter\n    {%- else %}\n    FROM stage_union\n    {%- endif %}\n    WHERE {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\n),\nstage AS (\n    SELECT DISTINCT {{ source_cols | join(', ') }}\n    FROM rank_union\n    WHERE row_number = 1\n),\nrecords_to_insert AS (\n    SELECT stage.* FROM stage\n    {%- if dbtvault.is_vault_insert_by_period() or is_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON stage.{{ src_pk }} = d.{{ src_pk }}\n    WHERE {{ dbtvault.prefix([src_pk], 'd') }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Link contains a distinct set of relationships between top-level business concepts. \nThese structures 'link' hubs together based on a business relationship between the two.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#link)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_snowflake_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_fk", "type": "mapping/string", "description": "A single column or list of columns which are the primary key columns of other, related tables. Used in links to shows hubs associated with the link."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.t_link": {"unique_id": "macro.dbtvault.t_link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/t_link.sql", "original_file_path": "macros/tables/t_link.sql", "name": "t_link", "macro_sql": "{%- macro t_link(src_pk, src_fk, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('t_link', packages = ['dbtvault'])(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                            source_model=source_model) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A transactional link is an immutable list of transaction records. By definition transactions are never modified:\nif a transaction needs to be updated, then a new transaction occurs. Transactional links contain a payload of columns which contain\ndetails about the transaction, usually consisting of payments, location, type and more. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#t_link)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_fk", "type": "mapping/string", "description": "A single column or list of columns which are the primary key columns of other, related tables. Used in links to shows hubs associated with the link."}, {"name": "src_payload", "type": "string", "description": "A list or single list of columns which contains the payload of the t-link. \nA t-link payload should contain the transactional/event attributes for entity descried in the corresponding hub record."}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.snowflake__t_link": {"unique_id": "macro.dbtvault.snowflake__t_link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/t_link.sql", "original_file_path": "macros/tables/t_link.sql", "name": "snowflake__t_link", "macro_sql": "\n\n{%- macro snowflake__t_link(src_pk, src_fk, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_payload, src_eff, src_ldts, src_source]) -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\nWITH stage AS (\n    SELECT {{ source_cols | join(', ') }}\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    {%- endif %}\n),\nrecords_to_insert AS (\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 'stg') }}\n    FROM stage AS stg\n    {% if is_incremental() -%}\n    LEFT JOIN {{ this }} AS tgt\n    ON {{ dbtvault.prefix([src_pk], 'stg') }} = {{ dbtvault.prefix([src_pk], 'tgt') }}\n    WHERE {{ dbtvault.prefix([src_pk], 'tgt') }} IS NULL\n    {%- endif -%}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A transactional link is an immutable list of transaction records. By definition transactions are never modified:\nif a transaction needs to be updated, then a new transaction occurs. Transactional links contain a payload of columns which contain\ndetails about the transaction, usually consisting of payments, location, type and more. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#t_link)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_snowflake_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_fk", "type": "mapping/string", "description": "A single column or list of columns which are the primary key columns of other, related tables. Used in links to shows hubs associated with the link."}, {"name": "src_payload", "type": "string", "description": "A list or single list of columns which contains the payload of the t-link. \nA t-link payload should contain the transactional/event attributes for entity descried in the corresponding hub record."}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.eff_sat": {"unique_id": "macro.dbtvault.eff_sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/eff_sat.sql", "original_file_path": "macros/tables/eff_sat.sql", "name": "eff_sat", "macro_sql": "{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('eff_sat', packages = ['dbtvault'])(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                                             src_start_date=src_start_date, src_end_date=src_end_date,\n                                                             src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                             source_model=source_model) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "An Effectivity Satellite keeps track of the effective dates of relationships contained in links. \nIf a relationship changes (for example, a Customer moves country, changing a customer and nation relation) \nthen an effectivity satellite will record this change as a new entry, and when it happened. \n\nWhen a new relationship is loaded from the source, a new record will be created with the new relation and an open end date (the max date, `9999-12-31`).\nIf auto end-dating is enabled and a relationship changes which is already recorded in the effectivity satellite, then effectivity satellites in dbtvault will \nautomatically create a record as a copy of the old record. This record will be created with the effective date of the new relation. \n\nIf auto end-dating is not enabled, a new record with open end date will still be created, but additional business rules will need to be applied to work out the \nend dates manually. This may be useful when there is external business logic which describes under what situations a relationship is considered effective or not. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#eff_sat)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_dfk", "type": "list/string", "description": ""}, {"name": "src_sfk", "type": "list/string", "description": ""}, {"name": "src_start_date", "type": "string", "description": ""}, {"name": "src_end_date", "type": "string", "description": ""}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.snowflake__eff_sat": {"unique_id": "macro.dbtvault.snowflake__eff_sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/eff_sat.sql", "original_file_path": "macros/tables/eff_sat.sql", "name": "snowflake__eff_sat", "macro_sql": "{%- macro snowflake__eff_sat(src_pk, src_dfk, src_sfk, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{{- dbtvault.prepend_generated_by() }}\n\nWITH source_data AS (\n    SELECT *\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    {% endif %}\n),\n{%- if load_relation(this) is none %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'e') }}\n    FROM source_data AS e\n)\n{%- else %}\nlatest_eff AS\n(\n    SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\n           ROW_NUMBER() OVER (\n                PARTITION BY b.{{ src_pk }}\n                ORDER BY b.{{ src_ldts }} DESC\n           ) AS row_number\n    FROM {{ this }} AS b\n),\nlatest_open_eff AS\n(\n    SELECT {{ dbtvault.alias_all(source_cols, 'a') }}\n    FROM latest_eff AS a\n    WHERE TO_DATE(a.{{ src_end_date }}) = TO_DATE('9999-12-31')\n    AND a.row_number = 1\n),\nstage_slice AS\n(\n    SELECT {{ dbtvault.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n),\nlinks_to_end_date AS (\n    SELECT a.*\n    FROM latest_open_eff AS a\n    LEFT JOIN stage_slice AS b\n    ON {{ dbtvault.multikey(src_dfk, prefix=['a', 'b'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_sfk, prefix='b', condition='IS NULL', operator='OR') }}\n    OR {{ dbtvault.multikey(src_sfk, prefix=['a', 'b'], condition='<>', operator='OR') }}\n),\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.alias_all(source_cols, 'stage') }}\n    FROM stage_slice AS stage\n    LEFT JOIN latest_open_eff AS e\n    ON stage.{{ src_pk }} = e.{{ src_pk }}\n    WHERE e.{{ src_pk }} IS NULL\n    AND {{ dbtvault.multikey(src_dfk, prefix='stage', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_sfk, prefix='stage', condition='IS NOT NULL') }}\n),\n{%- if is_auto_end_dating %}\nnew_end_dated_records AS (\n    SELECT DISTINCT\n        h.{{ src_pk }},\n        {{ dbtvault.alias_all(fk_cols, 'g') }},\n        h.EFFECTIVE_FROM AS {{ src_start_date }}, h.{{ src_source }}\n    FROM latest_open_eff AS h\n    INNER JOIN links_to_end_date AS g\n    ON g.{{ src_pk }} = h.{{ src_pk }}\n),\namended_end_dated_records AS (\n    SELECT DISTINCT\n        a.{{ src_pk }},\n        {{ dbtvault.alias_all(fk_cols, 'a') }},\n        a.{{ src_start_date }},\n        stage.{{ src_eff }} AS END_DATE, stage.{{ src_eff }}, stage.{{ src_ldts }},\n        a.{{ src_source }}\n    FROM new_end_dated_records AS a\n    INNER JOIN stage_slice AS stage\n    ON {{ dbtvault.multikey(src_dfk, prefix=['stage', 'a'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_sfk, prefix='stage', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_dfk, prefix='stage', condition='IS NOT NULL') }}\n),\n{%- endif %}\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    {%- if is_auto_end_date %}\n    UNION\n    SELECT * FROM amended_end_dated_records\n    {%- endif %}\n)\n{%- endif %}\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "An Effectivity Satellite keeps track of the effective dates of relationships contained in links. \nIf a relationship changes (for example, a Customer moves country, changing a customer and nation relation) \nthen an effectivity satellite will record this change as a new entry, and when it happened. \n\nWhen a new relationship is loaded from the source, a new record will be created with the new relation and an open end date (the max date, `9999-12-31`).\nIf auto end-dating is enabled and a relationship changes which is already recorded in the effectivity satellite, then effectivity satellites in dbtvault will \nautomatically create a record as a copy of the old record. This record will be created with the effective date of the new relation. \n\nIf auto end-dating is not enabled, a new record with open end date will still be created, but additional business rules will need to be applied to work out the \nend dates manually. This may be useful when there is external business logic which describes under what situations a relationship is considered effective or not. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#eff_sat)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_snowflake_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_dfk", "type": "list/string", "description": ""}, {"name": "src_sfk", "type": "list/string", "description": ""}, {"name": "src_start_date", "type": "string", "description": ""}, {"name": "src_end_date", "type": "string", "description": ""}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.hub": {"unique_id": "macro.dbtvault.hub", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/hub.sql", "original_file_path": "macros/tables/hub.sql", "name": "hub", "macro_sql": "{%- macro hub(src_pk, src_nk, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('hub', packages = ['dbtvault'])(src_pk=src_pk, src_nk=src_nk,\n                                                         src_ldts=src_ldts, src_source=src_source,\n                                                         source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Hub contains a distinct set of keys for a given top-level business concept, for example a `HUB_CUSTOMER` hub may contain a distinct list\nof Customer IDs. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hub)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_nk", "type": "mapping/string", "description": "The column used as the natural or business key of the table. This must be the non-hashed version of the column used for the `src_pk`."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.snowflake__hub": {"unique_id": "macro.dbtvault.snowflake__hub", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/hub.sql", "original_file_path": "macros/tables/hub.sql", "name": "snowflake__hub", "macro_sql": "{%- macro snowflake__hub(src_pk, src_nk, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_ldts, src_source]) -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrank_{{ source_number }} AS (\n    SELECT {{ source_cols | join(', ') }},\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ src_pk }}\n               ORDER BY {{ src_ldts }} ASC\n           ) AS row_number\n    FROM {{ ref(src) }}\n),\nstage_{{ source_number }} AS (\n    SELECT DISTINCT {{ source_cols | join(', ') }}\n    FROM rank_{{ source_number }}\n    WHERE row_number = 1\n),\n{% endfor -%}\n\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM stage_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n),\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_period_filter AS (\n    SELECT *\n    FROM stage_union\n    WHERE __PERIOD_FILTER__\n),\n{%- endif %}\nrank_union AS (\n    SELECT *,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ src_pk }}\n               ORDER BY {{ src_ldts }}, {{ src_source }} ASC\n           ) AS row_number\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    FROM stage_period_filter\n    {%- else %}\n    FROM stage_union\n    {%- endif %}\n    WHERE {{ src_pk }} IS NOT NULL\n),\nstage AS (\n    SELECT DISTINCT {{ source_cols | join(', ') }}\n    FROM rank_union\n    WHERE row_number = 1\n),\nrecords_to_insert AS (\n    SELECT stage.* FROM stage\n    {%- if dbtvault.is_vault_insert_by_period() or is_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON stage.{{ src_pk }} = d.{{ src_pk }}\n    WHERE {{ dbtvault.prefix([src_pk], 'd') }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Hub contains a distinct set of keys for a given top-level business concept, for example a `HUB_CUSTOMER` hub may contain a distinct list\nof Customer IDs. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hub)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_snowflake_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_nk", "type": "mapping/string", "description": "The column used as the natural or business key of the table. This must be the non-hashed version of the column used for the `src_pk`."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.sat": {"unique_id": "macro.dbtvault.sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/sat.sql", "original_file_path": "macros/tables/sat.sql", "name": "sat", "macro_sql": "{%- macro sat(src_pk, src_hashdiff, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('sat', packages = ['dbtvault'])(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                                         src_payload=src_payload, src_eff=src_eff, src_ldts=src_ldts,\n                                                         src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Satellite contains records corresponding to Hub or Link records which provide concrete attributes for those records. For example a `SAT_CUSTOMER_DETAILS` Satellite\nwould contain details about the customer, by using the same primary key as the corresponding hub record. \nThe payload for this example may contain `CUSTOMER_DOB`, `CUSTOMER_GIVEN_NAME`, `CUSTOMER_SURNAME` columns.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#sat)", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_hashdiff", "type": "string", "description": "A column which contains a single hash, composed of a list of columns and alpha-sorted. A hashdiff is used as a kind of checksum, to detect changes in records. \nIf any of the columns which form the hashdiff change their value, then the hashdiff itself will change. This is used in satellites to detect changes in the payload."}, {"name": "src_payload", "type": "string", "description": "A list or single list of columns which contains the payload of the satellite. \nA satellite payload should contain the concrete attributes for entity descried in the corresponding hub record."}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbtvault.snowflake__sat": {"unique_id": "macro.dbtvault.snowflake__sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "macros/tables/sat.sql", "original_file_path": "macros/tables/sat.sql", "name": "snowflake__sat", "macro_sql": "\n\n{%- macro snowflake__sat(src_pk, src_hashdiff, src_payload, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_eff, src_ldts, src_source]) -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\nWITH source_data AS (\n    SELECT *\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    {% endif %}\n),\n{% if dbtvault.is_vault_insert_by_period() or is_incremental() -%}\n\nupdate_records AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ this }} as a\n    JOIN source_data as b\n    ON a.{{ src_pk }} = b.{{ src_pk }}\n),\nrank AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'c', alias_target='target') }},\n           CASE WHEN RANK()\n           OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'c') }}\n           ORDER BY {{ dbtvault.prefix([src_ldts], 'c') }} DESC) = 1\n    THEN 'Y' ELSE 'N' END AS latest\n    FROM update_records as c\n),\nstage AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'd', alias_target='target') }}\n    FROM rank AS d\n    WHERE d.latest = 'Y'\n),\n{% endif -%}\n\nrecords_to_insert AS (\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'e') }}\n    FROM source_data AS e\n    {% if dbtvault.is_vault_insert_by_period() or is_incremental() -%}\n    LEFT JOIN stage\n    ON {{ dbtvault.prefix([src_hashdiff], 'stage', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'e') }}\n    WHERE {{ dbtvault.prefix([src_hashdiff], 'stage', alias_target='target') }} IS NULL\n    {% endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A Satellite contains records corresponding to Hub or Link records which provide concrete attributes for those records. For example a `SAT_CUSTOMER_DETAILS` Satellite\nwould contain details about the customer, by using the same primary key as the corresponding hub record. \nThe payload for this example may contain `CUSTOMER_DOB`, `CUSTOMER_GIVEN_NAME`, `CUSTOMER_SURNAME` columns.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#sat)\n\nSnowflake implementation", "meta": {}, "docs": {"show": true}, "patch_path": "macros/tables/tables_snowflake_schema.yml", "arguments": [{"name": "src_pk", "type": "mapping/string", "description": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, {"name": "src_hashdiff", "type": "string", "description": "A column which contains a single hash, composed of a list of columns and alpha-sorted. A hashdiff is used as a kind of checksum, to detect changes in records. \nIf any of the columns which form the hashdiff change their value, then the hashdiff itself will change. This is used in satellites to detect changes in the payload."}, {"name": "src_payload", "type": "string", "description": "A list or single list of columns which contains the payload of the satellite. \nA satellite payload should contain the concrete attributes for entity descried in the corresponding hub record."}, {"name": "src_eff", "type": "string", "description": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, {"name": "src_ldts", "type": "string", "description": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, {"name": "src_source", "type": "string", "description": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, {"name": "source_model", "type": "string", "description": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}]}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              null as \"table_comment\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              null as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict %}\n        {{ column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$ {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n\n  -- setup\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        );\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['injected_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    select * from insertions\n    union all\n    select * from updates\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbtvault.macro__hash": {"unique_id": "dbtvault.macro__hash", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "macro__hash", "block_contents": "Generate SQL to hash one or more columns using MD5 or SHA256. \n\nSee [How do we hash?](https://dbtvault.readthedocs.io/en/latest/best_practices/#how-do-we-hash) for an in-depth look at how dbtvault does hashing. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hash)"}, "dbtvault.arg__hash__columns": {"unique_id": "dbtvault.arg__hash__columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__hash__columns", "block_contents": "A list of one or more columns to hash."}, "dbtvault.arg__hash__alias": {"unique_id": "dbtvault.arg__hash__alias", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__hash__alias", "block_contents": "The alias (name) for the new column output using the hash macro."}, "dbtvault.arg__hash__is_hashdiff": {"unique_id": "dbtvault.arg__hash__is_hashdiff", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__hash__is_hashdiff", "block_contents": "Boolean flag. If true, sort the column names in alphabetical order prior to hashing.\nThis is required for hashdiffs to ensure consistent hashing."}, "dbtvault.macro__prefix": {"unique_id": "dbtvault.macro__prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "macro__prefix", "block_contents": "Prefix one or more strings with a given string and print each one.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#prefix)"}, "dbtvault.arg__prefix__columns": {"unique_id": "dbtvault.arg__prefix__columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__prefix__columns", "block_contents": "A list of columns (string or mapping) to prefix.\n\nIf a column is specified using an alias mapping as follows:\n\n{'source_column': <'column name'>, 'alias': <'alias string'>}\n\nThen it will also be aliased using `AS <column name>`."}, "dbtvault.arg__prefix__prefix_str": {"unique_id": "dbtvault.arg__prefix__prefix_str", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__prefix__prefix_str", "block_contents": "The string to prepend to each column/string."}, "dbtvault.arg__prefix__alias_target": {"unique_id": "dbtvault.arg__prefix__alias_target", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "supporting.md", "original_file_path": "docs/supporting.md", "name": "arg__prefix__alias_target", "block_contents": "Switch the aliasing target. `source` by default.\n\nIf a column is specified using an alias mapping as follows:\n\n`{'source_column': <'column name'>, 'alias': <'alias string'>}`\n\nThen it will also be aliased using `AS <column name>`.\n\nHowever, if the `alias_target` is `target` instead of `source`, the column will be rendered as follows:\n\n`AS <alias string>`"}, "dbtvault.macro__stage": {"unique_id": "dbtvault.macro__stage", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "macro__stage", "block_contents": "A macro to aid in generating a staging layer for the raw vault. Allows users to:\n\n- Create new columns from already existing columns (Derived columns)\n- Create new hashed columns from already existing columns (Hashed columns)\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#stage)"}, "dbtvault.arg__stage__include_source_columns": {"unique_id": "dbtvault.arg__stage__include_source_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "arg__stage__include_source_columns", "block_contents": "True by default. If true, all columns included in the source model for the stage layer, will be propagated to the stage layer.\n\nIf false, only derived and hash columns (if configured) will be present in the resulting stage layer."}, "dbtvault.arg__stage__source_model": {"unique_id": "dbtvault.arg__stage__source_model", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "arg__stage__source_model", "block_contents": "The dbt model name or source to build a staging layer from. Can be provided in the following formats:\n\n```\n[REF STYLE]\nsource_model: model_name\nOR\n[SOURCES STYLE]\nsource_model:\n    source_name: source_table_name\"\n```"}, "dbtvault.arg__stage__hashed_columns": {"unique_id": "dbtvault.arg__stage__hashed_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "arg__stage__hashed_columns", "block_contents": "A mapping of hash key names to column names which should be hashed to create that key.\n\ne.g.\n\n```\nhashed_columns:\n    SUPPLIER_PK: 'SUPPLIERKEY'\n    SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n    SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n    REGION_PK: 'SUPPLIER_REGION_KEY'\n    NATION_PK: 'SUPPLIER_NATION_KEY'\n    NATION_REGION_PK:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_REGION_KEY'\n    LINK_SUPPLIER_NATION_PK:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_NATION_KEY'\n    PART_PK: 'PARTKEY'\n    INVENTORY_PK:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n    INVENTORY_HASHDIFF:\n      is_hashdiff: true\n      columns:\n        - 'PARTKEY'\n        - 'SUPPLIERKEY'\n        - 'AVAILQTY'\n        - 'SUPPLYCOST'\n        - 'PART_SUPPLY_COMMENT'\n```"}, "dbtvault.arg__stage__derived_columns": {"unique_id": "dbtvault.arg__stage__derived_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "arg__stage__derived_columns", "block_contents": "A mapping of new column names to existing columns which should be hashed to create that key.\n\ne.g.\n\n```\nderived_columns:\n    NATION_KEY: 'SUPPLIER_NATION_KEY'\n    REGION_KEY: 'SUPPLIER_REGION_KEY'\n    SOURCE: '!TPCH-INVENTORY'\n```"}, "dbtvault.macro__derive_columns": {"unique_id": "dbtvault.macro__derive_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "macro__derive_columns", "block_contents": "A macro used by the `stage` macro internally, which processes a mapping of new columns to source columns, in order to generate new columns. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#derive_columns)"}, "dbtvault.arg__derive_columns__source_relation": {"unique_id": "dbtvault.arg__derive_columns__source_relation", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "arg__derive_columns__source_relation", "block_contents": "The source relation to extract columns from, for deriving from."}, "dbtvault.macro__hash_columns": {"unique_id": "dbtvault.macro__hash_columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "staging.md", "original_file_path": "docs/staging.md", "name": "macro__hash_columns", "block_contents": "A macro used by the `stage` macro internally, which processes a mapping of hash key names to source columns, in order to generate hash keys. \n\nSee also:\n[stage](#!/macro/macro.dbtvault.stage)\n[Online docs](https://dbtvault.readthedocs.io/en/latest/macros/#hash_columns)"}, "dbtvault.platform__snowflake": {"unique_id": "dbtvault.platform__snowflake", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "platforms.md", "original_file_path": "docs/platforms.md", "name": "platform__snowflake", "block_contents": "Snowflake implementation"}, "dbtvault.macro__alias": {"unique_id": "dbtvault.macro__alias", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__alias", "block_contents": "Perform aliasing on a mapping and optionally prefix the string as well.\n\nSee also:\n[alias_all](#!/macro/macro.dbtvault.alias_all)"}, "dbtvault.arg__alias__alias_config": {"unique_id": "dbtvault.arg__alias__alias_config", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__alias__alias_config", "block_contents": "A mapping, containing a configuration for the aliasing. \n                                                \n| Key           | Description          | Type   |\n| ------------- | -------------------- | ------ |\n| source_column | Column being aliased | string |\n| alias         | Column alias         | string |"}, "dbtvault.arg__alias__prefix": {"unique_id": "dbtvault.arg__alias__prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__alias__prefix", "block_contents": "A string to prefix the column with."}, "dbtvault.macro__alias_all": {"unique_id": "dbtvault.macro__alias_all", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__alias_all", "block_contents": "Perform aliasing on a mapping and optionally prefix the string as well."}, "dbtvault.arg__alias_all__columns": {"unique_id": "dbtvault.arg__alias_all__columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__alias_all__columns", "block_contents": "A list of columns, as strings or mappings.\n\ne.g.\n\n```\nsrc_hashdiff: \n  source_column: \"CUSTOMER_HASHDIFF\"\n  alias: \"HASHDIFF\"\n```"}, "dbtvault.arg__alias_all__prefix": {"unique_id": "dbtvault.arg__alias_all__prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__alias_all__prefix", "block_contents": "A string to prefix all columns with."}, "dbtvault.macro__as_constant": {"unique_id": "dbtvault.macro__as_constant", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__as_constant", "block_contents": "Render a string as a constant value if it is prefixed with an exclamation mark (`!`) otherwise, return as provided."}, "dbtvault.arg__as_constant__column_str": {"unique_id": "dbtvault.arg__as_constant__column_str", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__as_constant__column_str", "block_contents": "The string to parse as a constant."}, "dbtvault.macro__expand_column_list": {"unique_id": "dbtvault.macro__expand_column_list", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__expand_column_list", "block_contents": "Flatten a nested list structure into a single list so that it may be rendered in CSV format or provided to other macros."}, "dbtvault.arg__expand_column_list__columns": {"unique_id": "dbtvault.arg__expand_column_list__columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__expand_column_list__columns", "block_contents": "A list of lists to flatten. May contain strings as well, these will be added as single items in the returned list."}, "dbtvault.macro__multikey": {"unique_id": "dbtvault.macro__multikey", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__multikey", "block_contents": "Apply the same conditions and comparisons to a list of columns/keys. \n\ne.g. Given the following argument values:\n\ncolumns = ['CUSTOMER_ID', 'NATION_ID']\nprefix = ['a', 'b']\ncondition = '='\noperator = 'AND'\n\nThe macro would render this as:\n\n```\na.CUSTOMER_ID = b.CUSTOMER_ID\nAND a.NATION_ID = b.NATION_ID \n```"}, "dbtvault.arg__multikey__columns": {"unique_id": "dbtvault.arg__multikey__columns", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__multikey__columns", "block_contents": "A list of columns to generate comparisons for."}, "dbtvault.arg__multikey__prefix": {"unique_id": "dbtvault.arg__multikey__prefix", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__multikey__prefix", "block_contents": "A pair of prefixes, one for each side of the comparison."}, "dbtvault.arg__multikey__condition": {"unique_id": "dbtvault.arg__multikey__condition", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__multikey__condition", "block_contents": "The comparison to make between the keys, should be one of: \n\n'<>', '!=', '='"}, "dbtvault.arg__multikey__operator": {"unique_id": "dbtvault.arg__multikey__operator", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "arg__multikey__operator", "block_contents": "The operator to join the conditions with, defaults to 'AND', but could also be 'OR'."}, "dbtvault.macro__prepend_generated_by": {"unique_id": "dbtvault.macro__prepend_generated_by", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "internal.md", "original_file_path": "docs/internal.md", "name": "macro__prepend_generated_by", "block_contents": "A convenience macro to print a `-- Generated by dbtvault.` string."}, "dbtvault.__dbtvault__": {"unique_id": "dbtvault.__dbtvault__", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__dbtvault__", "block_contents": "<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/25080503/65772647-89525700-e132-11e9-80ff-12ad30a25466.png\">\n</p>\n\n[![Documentation Status](https://readthedocs.org/projects/dbtvault/badge/?version=stable)](https://dbtvault.readthedocs.io/en/latest/?badge=stable)\n\n[![Join our Slack](https://img.shields.io/badge/Slack-Join-yellow?style=flat&logo=slack)](https://join.slack.com/t/dbtvault/shared_invite/enQtODY5MTY3OTIyMzg2LWJlZDMyNzM4YzAzYjgzYTY0MTMzNTNjN2EyZDRjOTljYjY0NDYyYzEwMTlhODMzNGY3MmU2ODNhYWUxYmM2NjA)\n\n# dbtvault by [Datavault](https://www.data-vault.co.uk)\n\nBuild your own Data Vault data warehouse! dbtvault is a free to use dbt package that generates & executes the ETL you need to run a Data Vault 2.0 Data Warehouse on a Snowflake database.\n\nWhat does dbtvault offer?\n- productivity gains, fewer errors\n- multi-threaded execution of the generated SQL\n- your data modeller can generate most of the ETL code directly from their mapping metadata\n- your ETL developers can focus on the 5% of the SQL code that is different\n- dbt generates documentation and data flow diagrams\n\npowered by [dbt](https://www.getdbt.com/), a registered trademark of [Fishtown Analytics](https://www.fishtownanalytics.com/)\n\n[See the github repo for more details!](https://github.com/Datavault-UK/dbtvault/)"}, "dbtvault.materialization__vault_insert_by_period__default": {"unique_id": "dbtvault.materialization__vault_insert_by_period__default", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/materialisations.md", "original_file_path": "docs/materialisations/materialisations.md", "name": "materialization__vault_insert_by_period__default", "block_contents": "A materialisation designed to iterate through source data and load it in discrete periods of time, configurable by the user."}, "dbtvault.macro__is_vault_insert_by_period": {"unique_id": "dbtvault.macro__is_vault_insert_by_period", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/materialisations.md", "original_file_path": "docs/materialisations/materialisations.md", "name": "macro__is_vault_insert_by_period", "block_contents": "Check that a model is using the `vault_insert_by_period` materialisation."}, "dbtvault.macro__replace_placeholder_with_filter": {"unique_id": "dbtvault.macro__replace_placeholder_with_filter", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/replace_placeholder_with_filter.md", "original_file_path": "docs/materialisations/helpers/replace_placeholder_with_filter.md", "name": "macro__replace_placeholder_with_filter", "block_contents": "Replace the `__PERIOD_FILTER__` string present in the given SQL, with a `WHERE` clause which filters data by a\nspecific `period` of time, `offset` from the `start_date`."}, "dbtvault.arg__replace_placeholder_with_filter__core_sql": {"unique_id": "dbtvault.arg__replace_placeholder_with_filter__core_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/replace_placeholder_with_filter.md", "original_file_path": "docs/materialisations/helpers/replace_placeholder_with_filter.md", "name": "arg__replace_placeholder_with_filter__core_sql", "block_contents": "SQL string containing the `__PERIOD_FILTER__` string."}, "dbtvault.macro__get_period_of_load": {"unique_id": "dbtvault.macro__get_period_of_load", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_of_load.md", "original_file_path": "docs/materialisations/helpers/get_period_of_load.md", "name": "macro__get_period_of_load", "block_contents": "A helper macro to fetch the date of the current load cycle."}, "dbtvault.arg__get_period_of_load__start_timestamp": {"unique_id": "dbtvault.arg__get_period_of_load__start_timestamp", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_of_load.md", "original_file_path": "docs/materialisations/helpers/get_period_of_load.md", "name": "arg__get_period_of_load__start_timestamp", "block_contents": "The `start_timestamp` of the load, derived from the `start_date`."}, "dbtvault.macro__get_period_filter_sql": {"unique_id": "dbtvault.macro__get_period_filter_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_filter_sql.md", "original_file_path": "docs/materialisations/helpers/get_period_filter_sql.md", "name": "macro__get_period_filter_sql", "block_contents": "A wrapper around the `replace_placeholder_with_filter` macro which creates a query designed to\nbuild a temporary table, to select the necessary records for the given load cycle."}, "dbtvault.arg__get_period_filter_sql__target_cols_csv": {"unique_id": "dbtvault.arg__get_period_filter_sql__target_cols_csv", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_filter_sql.md", "original_file_path": "docs/materialisations/helpers/get_period_filter_sql.md", "name": "arg__get_period_filter_sql__target_cols_csv", "block_contents": "A CSV string of the columns to be created in the target table \n(the table the model is creating with this materialisation)"}, "dbtvault.arg__get_period_filter_sql__base_sql": {"unique_id": "dbtvault.arg__get_period_filter_sql__base_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_filter_sql.md", "original_file_path": "docs/materialisations/helpers/get_period_filter_sql.md", "name": "arg__get_period_filter_sql__base_sql", "block_contents": "The SQL provided by the model, prior to any manipulation."}, "dbtvault.macro__check_placeholder": {"unique_id": "dbtvault.macro__check_placeholder", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/check_placeholder.md", "original_file_path": "docs/materialisations/helpers/check_placeholder.md", "name": "macro__check_placeholder", "block_contents": "Searches the given SQL string for an expected placeholder, throwing an error if it is not found."}, "dbtvault.arg__check_placeholder__model_sql": {"unique_id": "dbtvault.arg__check_placeholder__model_sql", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/check_placeholder.md", "original_file_path": "docs/materialisations/helpers/check_placeholder.md", "name": "arg__check_placeholder__model_sql", "block_contents": "The SQL string to search."}, "dbtvault.arg__check_placeholder__placeholder": {"unique_id": "dbtvault.arg__check_placeholder__placeholder", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/check_placeholder.md", "original_file_path": "docs/materialisations/helpers/check_placeholder.md", "name": "arg__check_placeholder__placeholder", "block_contents": "Optional. Default: `__PERIOD_FILTER__`\n\nThe placeholder to search for."}, "dbtvault.arg__period_materialisation__timestamp_field": {"unique_id": "dbtvault.arg__period_materialisation__timestamp_field", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/shared_definitions.md", "original_file_path": "docs/materialisations/helpers/shared_definitions.md", "name": "arg__period_materialisation__timestamp_field", "block_contents": "The field to reference and extract timestamps and dates from. \n\nThis should be the same as the `src_ldts` attribute if using a table macro."}, "dbtvault.arg__period_materialisation__offset": {"unique_id": "dbtvault.arg__period_materialisation__offset", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/shared_definitions.md", "original_file_path": "docs/materialisations/helpers/shared_definitions.md", "name": "arg__period_materialisation__offset", "block_contents": "The period of time to offset the start of the load from. For example, if period is set to `day` and the offset is `1`, then\nthis will evaluate to `start + 1 day`"}, "dbtvault.arg__period_materialisation__period": {"unique_id": "dbtvault.arg__period_materialisation__period", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/shared_definitions.md", "original_file_path": "docs/materialisations/helpers/shared_definitions.md", "name": "arg__period_materialisation__period", "block_contents": "The period of time to iterate through. The naming varies per platform, though some common examples are:\n\n- hour\n- day\n- month\n- year\n\nSee below for platform specific documentation.\n\n[Snowflake](https://docs.snowflake.com/en/sql-reference/functions-date-time.html#supported-date-and-time-parts)"}, "dbtvault.arg__period_materialisation__start_timestamp": {"unique_id": "dbtvault.arg__period_materialisation__start_timestamp", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/shared_definitions.md", "original_file_path": "docs/materialisations/helpers/shared_definitions.md", "name": "arg__period_materialisation__start_timestamp", "block_contents": "The starting timestamp for the range of records to be loaded. \nRecords must have a timestamp greater or equal to this value to be included."}, "dbtvault.arg__period_materialisation__stop_timestamp": {"unique_id": "dbtvault.arg__period_materialisation__stop_timestamp", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/shared_definitions.md", "original_file_path": "docs/materialisations/helpers/shared_definitions.md", "name": "arg__period_materialisation__stop_timestamp", "block_contents": "The stopping timestamp for the range of records to be loaded. \nRecords must have a timestamp less than this value to be included."}, "dbtvault.macro__get_start_stop_dates": {"unique_id": "dbtvault.macro__get_start_stop_dates", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_start_stop_dates.md", "original_file_path": "docs/materialisations/helpers/get_start_stop_dates.md", "name": "macro__get_start_stop_dates", "block_contents": "A helper macro to fetch the start and stop dates to load with. It will either infer the date range from the min and max \ndates present in the tables in `date_source_models` list, or alternatively use the `start_date` and `stop_date` \nconfig options. The config options take precedence if both are provided. A suitable error is raised if neither is provided."}, "dbtvault.arg__get_start_stop_dates__mat_config": {"unique_id": "dbtvault.arg__get_start_stop_dates__mat_config", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_start_stop_dates.md", "original_file_path": "docs/materialisations/helpers/get_start_stop_dates.md", "name": "arg__get_start_stop_dates__mat_config", "block_contents": "The `config` variable provided to the materialisation macro."}, "dbtvault.arg__get_start_stop_dates__date_source_models": {"unique_id": "dbtvault.arg__get_start_stop_dates__date_source_models", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_start_stop_dates.md", "original_file_path": "docs/materialisations/helpers/get_start_stop_dates.md", "name": "arg__get_start_stop_dates__date_source_models", "block_contents": "A list of models to union together and extract min and max dates from, which will be used as the range to load records with."}, "dbtvault.macro__get_period_boundaries": {"unique_id": "dbtvault.macro__get_period_boundaries", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_boundaries.md", "original_file_path": "docs/materialisations/helpers/get_period_boundaries.md", "name": "macro__get_period_boundaries", "block_contents": "Get the start and stop timestamp, as well as the number of periods/iterations which need to be made to do the full load.\nIt is important to note that this materialisation handles the idempotent nature of the materialisation by running a `COALESCE`\non the maximal date found in the target table if it already exists, and the provided `start_date`. \n\nThis also allows the materialisation to handle aborted loads."}, "dbtvault.arg__get_period_boundaries__target_schema": {"unique_id": "dbtvault.arg__get_period_boundaries__target_schema", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_boundaries.md", "original_file_path": "docs/materialisations/helpers/get_period_boundaries.md", "name": "arg__get_period_boundaries__target_schema", "block_contents": "The schema that the target table is materialised in."}, "dbtvault.arg__get_period_boundaries__target_table": {"unique_id": "dbtvault.arg__get_period_boundaries__target_table", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_boundaries.md", "original_file_path": "docs/materialisations/helpers/get_period_boundaries.md", "name": "arg__get_period_boundaries__target_table", "block_contents": "The name of the materialised target table."}, "dbtvault.arg__get_period_boundaries__start_date": {"unique_id": "dbtvault.arg__get_period_boundaries__start_date", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_boundaries.md", "original_file_path": "docs/materialisations/helpers/get_period_boundaries.md", "name": "arg__get_period_boundaries__start_date", "block_contents": "The date stamp to start loading from. Must be in the format 'YYYY-MM-DD'"}, "dbtvault.arg__get_period_boundaries__stop_date": {"unique_id": "dbtvault.arg__get_period_boundaries__stop_date", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "materialisations/helpers/get_period_boundaries.md", "original_file_path": "docs/materialisations/helpers/get_period_boundaries.md", "name": "arg__get_period_boundaries__stop_date", "block_contents": "THe date stamp to stop loading on. Must be in the format 'YYYY-MM-DD'"}, "dbtvault.macro__hub": {"unique_id": "dbtvault.macro__hub", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/tables.md", "original_file_path": "docs/tables/tables.md", "name": "macro__hub", "block_contents": "A Hub contains a distinct set of keys for a given top-level business concept, for example a `HUB_CUSTOMER` hub may contain a distinct list\nof Customer IDs. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#hub)"}, "dbtvault.macro__link": {"unique_id": "dbtvault.macro__link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/tables.md", "original_file_path": "docs/tables/tables.md", "name": "macro__link", "block_contents": "A Link contains a distinct set of relationships between top-level business concepts. \nThese structures 'link' hubs together based on a business relationship between the two.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#link)"}, "dbtvault.macro__sat": {"unique_id": "dbtvault.macro__sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/tables.md", "original_file_path": "docs/tables/tables.md", "name": "macro__sat", "block_contents": "A Satellite contains records corresponding to Hub or Link records which provide concrete attributes for those records. For example a `SAT_CUSTOMER_DETAILS` Satellite\nwould contain details about the customer, by using the same primary key as the corresponding hub record. \nThe payload for this example may contain `CUSTOMER_DOB`, `CUSTOMER_GIVEN_NAME`, `CUSTOMER_SURNAME` columns.\n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#sat)"}, "dbtvault.macro__eff_sat": {"unique_id": "dbtvault.macro__eff_sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/tables.md", "original_file_path": "docs/tables/tables.md", "name": "macro__eff_sat", "block_contents": "An Effectivity Satellite keeps track of the effective dates of relationships contained in links. \nIf a relationship changes (for example, a Customer moves country, changing a customer and nation relation) \nthen an effectivity satellite will record this change as a new entry, and when it happened. \n\nWhen a new relationship is loaded from the source, a new record will be created with the new relation and an open end date (the max date, `9999-12-31`).\nIf auto end-dating is enabled and a relationship changes which is already recorded in the effectivity satellite, then effectivity satellites in dbtvault will \nautomatically create a record as a copy of the old record. This record will be created with the effective date of the new relation. \n\nIf auto end-dating is not enabled, a new record with open end date will still be created, but additional business rules will need to be applied to work out the \nend dates manually. This may be useful when there is external business logic which describes under what situations a relationship is considered effective or not. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#eff_sat)"}, "dbtvault.macro__t_link": {"unique_id": "dbtvault.macro__t_link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/tables.md", "original_file_path": "docs/tables/tables.md", "name": "macro__t_link", "block_contents": "A transactional link is an immutable list of transaction records. By definition transactions are never modified:\nif a transaction needs to be updated, then a new transaction occurs. Transactional links contain a payload of columns which contain\ndetails about the transaction, usually consisting of payments, location, type and more. \n\n[Read more online](https://dbtvault.readthedocs.io/en/latest/macros/#t_link)"}, "dbtvault.arg__tables__src_pk": {"unique_id": "dbtvault.arg__tables__src_pk", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_pk", "block_contents": "The column used as the primary key of the table. This must be a hash key generated from a natural key in the staging layer. \nIn future versions of dbtvault, hashing will not be a requirement."}, "dbtvault.arg__tables__src_nk": {"unique_id": "dbtvault.arg__tables__src_nk", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_nk", "block_contents": "The column used as the natural or business key of the table. This must be the non-hashed version of the column used for the `src_pk`."}, "dbtvault.arg__tables__src_fk": {"unique_id": "dbtvault.arg__tables__src_fk", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_fk", "block_contents": "A single column or list of columns which are the primary key columns of other, related tables. Used in links to shows hubs associated with the link."}, "dbtvault.arg__tables__src_hashdiff": {"unique_id": "dbtvault.arg__tables__src_hashdiff", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_hashdiff", "block_contents": "A column which contains a single hash, composed of a list of columns and alpha-sorted. A hashdiff is used as a kind of checksum, to detect changes in records. \nIf any of the columns which form the hashdiff change their value, then the hashdiff itself will change. This is used in satellites to detect changes in the payload."}, "dbtvault.arg__tables__src_payload_sat": {"unique_id": "dbtvault.arg__tables__src_payload_sat", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_payload_sat", "block_contents": "A list or single list of columns which contains the payload of the satellite. \nA satellite payload should contain the concrete attributes for entity descried in the corresponding hub record."}, "dbtvault.arg__tables__src_payload__t_link": {"unique_id": "dbtvault.arg__tables__src_payload__t_link", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_payload__t_link", "block_contents": "A list or single list of columns which contains the payload of the t-link. \nA t-link payload should contain the transactional/event attributes for entity descried in the corresponding hub record."}, "dbtvault.arg__tables__src_eff": {"unique_id": "dbtvault.arg__tables__src_eff", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_eff", "block_contents": "The effective from column for a record. This is the business-effective date of a record. \n\n- For a transactional link, this would be the time at which the transaction occurred. \n- For a satellite, this would be the time at which we first saw this data in the system (i.e when the payload changed) in a given form.\n- For an effectivity satellite, this is the time at which we first saw the link relationship in a given form."}, "dbtvault.arg__tables__src_ldts": {"unique_id": "dbtvault.arg__tables__src_ldts", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_ldts", "block_contents": "The load datetime stamp of the record. When this record appeared/was loaded into the database."}, "dbtvault.arg__tables__src_source": {"unique_id": "dbtvault.arg__tables__src_source", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__src_source", "block_contents": "The source for a given record. This can be a code which corresponds to a lookup table or simply a string with a named system."}, "dbtvault.arg__tables__source_model": {"unique_id": "dbtvault.arg__tables__source_model", "package_name": "dbtvault", "root_path": "/home/alex/PycharmProjects/dbtvault-dev/dbtvault-dev", "path": "tables/shared_definitions.md", "original_file_path": "docs/tables/shared_definitions.md", "name": "arg__tables__source_model", "block_contents": "The name of the model which contains the data which needs to be loaded. This can be a list for Hubs and Links, which could have multiple sources."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/alex/.local/share/virtualenvs/dbtvault-dev-J8jCfODF/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "disabled": [], "generated_at": "2020-09-23T18:30:34.656117Z", "parent_map": {}, "child_map": {}, "metadata": {"project_id": "6abbf08807e8e3cb58dd67b82fb2433e", "user_id": "2f80c800-fc66-4c07-8e36-1bd13d994ebe", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}}